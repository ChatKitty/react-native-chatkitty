{"version":3,"sources":["call.ts"],"names":["isConferenceCall","call","type","isPresenterCall","StartedCallResult","ChatKittySucceededResult","constructor","GetCallsSucceededResult","paginator","GetCallSucceededResult","AcceptedCallResult","DeclinedCallResult","NoActiveCallError","ChatKittyError"],"mappings":";;;;;;;;;AAEA;;AAEA;;AAwCO,SAASA,gBAAT,CAA0BC,IAA1B,EAA8D;AACnE,SAAOA,IAAI,CAACC,IAAL,KAAc,YAArB;AACD;;AAEM,SAASC,eAAT,CAAyBF,IAAzB,EAA4D;AACjE,SAAOA,IAAI,CAACC,IAAL,KAAc,WAArB;AACD;;AAoBM,MAAME,iBAAN,SAAgCC,gCAAhC,CAAyD;AAC9DC,EAAAA,WAAW,CAAQL,IAAR,EAAoB;AAC7B;AAD6B,SAAZA,IAAY,GAAZA,IAAY;AAE9B;;AAH6D;;;;AAiBzD,MAAMM,uBAAN,SAAsCF,gCAAtC,CAA+D;AACpEC,EAAAA,WAAW,CAAQE,SAAR,EAA6C;AACtD;AADsD,SAArCA,SAAqC,GAArCA,SAAqC;AAEvD;;AAHmE;;;;AAQ/D,MAAMC,sBAAN,SAAqCJ,gCAArC,CAA8D;AACnEC,EAAAA,WAAW,CAAQL,IAAR,EAAoB;AAC7B;AAD6B,SAAZA,IAAY,GAAZA,IAAY;AAE9B;;AAHkE;;;;AAY9D,MAAMS,kBAAN,SAAiCL,gCAAjC,CAA0D;AAC/DC,EAAAA,WAAW,CAAQL,IAAR,EAAoB;AAC7B;AAD6B,SAAZA,IAAY,GAAZA,IAAY;AAE9B;;AAH8D;;;;AAY1D,MAAMU,kBAAN,SAAiCN,gCAAjC,CAA0D;AAC/DC,EAAAA,WAAW,CAAQL,IAAR,EAAoB;AAC7B;AAD6B,SAAZA,IAAY,GAAZA,IAAY;AAE9B;;AAH8D;;;;AAM1D,MAAMW,iBAAN,SAAgCC,qBAAhC,CAA+C;AACpDP,EAAAA,WAAW,GAAG;AACZ,UAAM,mBAAN,EAA2B,iCAA3B;AACD;;AAHmD","sourcesContent":["import { ChatKittyUserReference, User } from './user';\nimport { Channel } from './channel';\nimport { ChatKittyFailedResult, ChatKittySucceededResult } from './result';\nimport { ChatKittyPaginator } from './pagination';\nimport { ChatKittyError } from './error';\n\nexport type Call = ConferenceCall | PresenterCall;\n\ntype CallProperties = {\n  id: number;\n  type: string;\n  creator: User;\n  state: string;\n  p2p: boolean;\n  properties: unknown;\n  createdTime: string;\n  endTime?: string;\n  _relays: CallRelays;\n  _topics: CallTopics;\n  _actions: CallActions;\n};\n\nexport type ConferenceCall = CallProperties;\n\nexport type PresenterCall = CallProperties;\n\nexport interface CallRelays {\n  self: string;\n  participants: string;\n}\n\nexport interface CallTopics {\n  self: string;\n  participants: string;\n  userMediaSettings: string;\n  signals: string;\n}\n\nexport interface CallActions {\n  ready: string;\n  decline: string;\n  signal: string;\n}\n\nexport function isConferenceCall(call: Call): call is ConferenceCall {\n  return call.type === 'CONFERENCE';\n}\n\nexport function isPresenterCall(call: Call): call is PresenterCall {\n  return call.type === 'PRESENTER';\n}\n\ntype StartChannelCallRequest = {\n  channel: Channel;\n  type?: string;\n};\n\ntype StartDirectCallRequest = {\n  members: ChatKittyUserReference[];\n};\n\nexport type StartCallRequest = (\n  | StartChannelCallRequest\n  | StartDirectCallRequest\n) & {\n  properties?: unknown;\n};\n\nexport type StartCallResult = StartedCallResult | ChatKittyFailedResult;\n\nexport class StartedCallResult extends ChatKittySucceededResult {\n  constructor(public call: Call) {\n    super();\n  }\n}\n\nexport interface GetCallsRequest {\n  channel: Channel;\n  filter?: GetCallsFilter;\n}\n\nexport interface GetCallsFilter {\n  active?: boolean;\n}\n\nexport type GetCallsResult = GetCallsSucceededResult | ChatKittyFailedResult;\n\nexport class GetCallsSucceededResult extends ChatKittySucceededResult {\n  constructor(public paginator: ChatKittyPaginator<Call>) {\n    super();\n  }\n}\n\nexport type GetCallResult = GetCallSucceededResult | ChatKittyFailedResult;\n\nexport class GetCallSucceededResult extends ChatKittySucceededResult {\n  constructor(public call: Call) {\n    super();\n  }\n}\n\nexport interface AcceptCallRequest {\n  call: Call;\n}\n\nexport type AcceptCallResult = AcceptedCallResult | ChatKittyFailedResult;\n\nexport class AcceptedCallResult extends ChatKittySucceededResult {\n  constructor(public call: Call) {\n    super();\n  }\n}\n\nexport interface DeclineCallRequest {\n  call: Call;\n}\n\nexport type DeclineCallResult = DeclinedCallResult | ChatKittyFailedResult;\n\nexport class DeclinedCallResult extends ChatKittySucceededResult {\n  constructor(public call: Call) {\n    super();\n  }\n}\n\nexport class NoActiveCallError extends ChatKittyError {\n  constructor() {\n    super('NoActiveCallError', \"You're not currently in a call.\");\n  }\n}\n"]}