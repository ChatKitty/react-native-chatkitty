{"version":3,"sources":["chatkitty.ts"],"names":["ChatKitty","getInstance","apiKey","instance","_instances","get","undefined","set","channelRelay","id","userRelay","constructor","configuration","BehaviorSubject","Subject","Map","MessageMapper","ChatKittyCalls","callRelay","userMediaSettingsRelay","kitty","localStream","getVideoTracks","forEach","track","_switchCamera","getAudioTracks","enabled","isMuted","currentUser","stompX","sendAction","destination","_actions","updateMediaSettingsAudioEnabled","body","isCameraOn","updateMediaSettingsVideoEnabled","initialize","isFrontCamera","devices","mediaDevices","enumerateDevices","facing","videoSourceId","find","device","kind","facingMode","constraints","audio","media","video","mandatory","minWidth","minHeight","minFrameRate","optional","sourceId","getUserMedia","startCall","request","Promise","resolve","type","channel","members","result","createChannel","call","properties","onSuccess","startCallSession","then","StartedCallResult","onError","error","ChatKittyFailedResult","acceptCall","AcceptedCallResult","declineCall","decline","DeclinedCallResult","leaveCall","endCallUnsubscribe","getCalls","parameters","active","filter","ChatKittyPaginator","createInstance","relay","_relays","calls","contentName","paginator","GetCallsSucceededResult","catch","getCall","relayResource","GetCallSucceededResult","getCurrentCallParticipants","currentCall","NoActiveCallError","participants","GetUsersSucceededResult","getUserMediaSettings","user","settings","GetUserMediaSettingsSucceededResult","onCallInvite","onNextOrObserver","NoActiveSessionError","unsubscribe","listenForEvent","topic","_topics","event","onNext","onCallActive","onParticipantAcceptedCall","subscription","participantAcceptedCallSubject","subscribe","onParticipantDeclinedCall","participantDeclinedCallSubject","onParticipantActive","participantActiveSubject","stream","onParticipantMediaSettingsUpdated","participantMediaSettingsUpdatedSubject","onParticipantLeftCall","participantLeftCallSubject","onCallEnded","callEndedSubject","close","release","participantAcceptedCallUnsubscribe","participantDeclinedCallUnsubscribe","participantLeftCallUnsubscribe","userMediaSettingsUpdatedUnsubscribe","next","userMediaSettings","signalSubject","signalDispatcher","CallSignalDispatcher","receivedCallSignalUnsubscribe","signals","signal","end","signalsSubscription","connections","endedCallUnsubscribe","self","endedCall","connection","clear","activeCallUnsubscribe","c","onCreateOffer","peer","has","P2PConnection","createOffer","onAnswerOffer","onDisconnect","addCandidate","payload","answerOffer","e","console","log","callUnsubscribe","listenToTopic","participantsUnsubscribe","userMediaSettingsUnsubscribe","signalsUnsubscribe","superEnd","ready","onSent","StompX","isSecure","host","isDebug","environment","production","keyStrokesSubject","asObservable","pipe","thread","keystrokes","keys","startSession","initialized","SessionActiveError","connect","username","authParams","writeFileGrant","readFileGrant","channels","messages","notifications","contacts","users","reactions","threads","messageMapper","StartedSessionResult","onConnected","currentUserSubject","onConnectionLost","lostConnectionSubject","onConnectionResumed","resumedConnectionSubject","endSession","reject","disconnect","getCurrentUser","GetCurrentUserSuccessfulResult","onCurrentUserChanged","onCurrentUserOnline","onCurrentUserOffline","updateCurrentUser","update","UpdatedCurrentUserResult","updateCurrentUserDisplayPicture","file","Blob","sendToStream","_streams","displayPicture","grant","blob","UpdatedCurrentUserDisplayPictureResult","progressListener","onStarted","onProgress","progress","onCompleted","ChatKittyUploadResult","COMPLETED","onFailed","FAILED","onCancelled","CANCELLED","updateDisplayPicture","updateChannel","UpdatedChannelResult","deleteChannel","delete","DeletedChannelResult","events","CreatedChannelResult","getChannels","isGetChannelsRequest","joined","joinableChannels","subscribable","unread","unreadChannels","name","GetChannelsSucceededResult","getChannel","GetChannelSucceededResult","joinChannel","join","ChannelNotPubliclyJoinableError","JoinedChannelResult","leaveChannel","leave","NotAChannelMemberError","LeftChannelResult","addChannelModerator","addModerator","CannotAddModeratorToChannelError","AddedChannelModeratorResult","getUnreadChannelsCount","isGetChannelsUnreadRequest","channelsCount","resource","GetCountSucceedResult","count","getChannelUnread","GetChannelUnreadSucceededResult","exists","readChannel","read","ReadChannelSucceededResult","muteChannel","mute","state","MutedChannelResult","unmuteChannel","UnmutedChannelResult","clearChannelHistory","clearHistory","ClearChannelHistorySucceededResult","hideChannel","hide","HideChannelSucceededResult","startChatSession","onReceivedMessage","onReceivedKeystrokes","onParticipantEnteredChat","onParticipantLeftChat","onTypingStarted","onTypingStopped","onParticipantPresenceChanged","onEventTriggered","onMessageUpdated","onChannelUpdated","onMessageRead","onMessageReactionAdded","onMessageReactionRemoved","onThreadReceivedMessage","onThreadReceivedKeystrokes","onThreadTypingStarted","onThreadTypingStopped","receivedMessageUnsubscribe","receivedKeystrokesUnsubscribe","participantEnteredChatUnsubscribe","participantLeftChatUnsubscribe","typingStartedUnsubscribe","typingStoppedUnsubscribe","participantPresenceChangedUnsubscribe","eventTriggeredUnsubscribe","messageUpdatedUnsubscribe","channelUpdatedUnsubscribe","messageReadUnsubscribe","messageReactionAddedUnsubscribe","messageReactionRemovedUnsubscribe","threadReceivedMessageUnsubscribe","threadReceivedKeystrokesUnsubscribe","threadTypingStartedUnsubscribe","threadTypingStoppedUnsubscribe","message","parent","map","typing","readReceipts","receipt","reaction","channelUnsubscribe","messagesUnsubscribe","keystrokesUnsubscribe","typingUnsubscribe","readReceiptsUnsubscribe","reactionsUnsubscribe","eventsUnsubscribe","chatSessions","activeThread","session","setThread","StartedChatSessionResult","sendMessage","sendChannelMessageRequest","sendMessageReplyRequest","reply","replies","sendThreadMessageRequest","isSendChannelTextMessageRequest","groupTag","SentTextMessageResult","isSendChannelFileMessageRequest","isCreateChatKittyExternalFileProperties","SentFileMessageResult","getMessages","isGetChannelMessagesRequest","isGetMessageRepliesRequest","mapper","GetMessagesSucceededResult","getUnreadMessagesCount","unreadMessagesCount","isGetUnreadMessagesCountRequest","messagesCount","triggerEvent","TriggeredEventResult","readMessage","ReadMessageSucceededResult","getLastReadMessage","lastReadMessage","GetLastReadMessageResult","editMessage","edit","EditedMessageSucceededResult","getMessageRepliesCount","repliesCount","getMessageChannel","GetMessageChannelSucceededResult","getMessageParent","MessageNotAReplyError","GetMessageParentSucceededResult","createThread","CreatedThreadResult","getThreads","includeMainThread","standalone","GetThreadsSucceededResult","getThreadChannel","GetThreadChannelSucceededResult","getThreadMessage","GetThreadMessageSucceededResult","readThread","ReadThreadSucceededResult","reactToMessage","react","emoji","ReactedToMessageResult","getReactions","GetReactionsSucceededResult","removeReaction","RemovedReactionResult","deleteMessageForMe","deleteForMe","DeleteMessageForMeSucceededResult","deleteMessage","DeleteMessageSucceededResult","sendKeystrokes","onNotificationReceived","notification","onChannelJoined","onChannelHidden","onChannelUnhidden","onChannelLeft","getChannelMembers","getReadReceipts","GetReadReceiptsSucceededResult","getUsers","isGetUsersRequest","getUsersCount","contactsCount","onUserPresenceChanged","inviteUser","invite","ChannelNotInvitableError","InvitedUserResult","onParticipantStartedTyping","participant","onParticipantStoppedTyping","getUser","param","GetUserSucceededResult","getUserIsChannelMember","channelMember","channelId","GetUserIsChannelMemberSucceededResult","blockUser","BlockUserSucceededResult","getUserBlockList","userBlockListItems","GetUserBlockListSucceededResult","deleteUserBlockListItem","item","DeleteUserBlockListItemSucceededResult","url","description","rtcPeerConnection","offerAnswerOptions","setLocalDescription","dispatch","setRemoteDescription","answer","createAnswer","candidate","addIceCandidate","offerToReceiveAudio","offerToReceiveVideo","RTCPeerConnection","rtcConfiguration","onicecandidate","onaddstream","onconnectionstatechange","connectionState","oniceconnectionstatechange","addStream","iceServers","credential","urls"],"mappings":"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","sourcesContent":["import { BehaviorSubject, Subject } from 'rxjs';\n\nimport {\n  mediaDevices,\n  MediaStream,\n  MediaStreamConstraints,\n  RTCIceCandidateType,\n  RTCOfferOptions,\n  RTCPeerConnection,\n  RTCPeerConnectionConfiguration,\n  RTCSessionDescriptionType,\n} from 'react-native-webrtc';\nimport {\n  AcceptCallRequest,\n  AcceptCallResult,\n  AcceptedCallResult,\n  Call,\n  GetCallResult,\n  GetCallsRequest,\n  GetCallsResult,\n  GetCallsSucceededResult,\n  GetCallSucceededResult,\n  DeclineCallRequest,\n  DeclineCallResult,\n  DeclinedCallResult,\n  StartCallRequest,\n  StartCallResult,\n  StartedCallResult,\n  NoActiveCallError,\n} from './call';\nimport {\n  AnswerOfferCallSignal,\n  CallSignal,\n  CreateCallSignalRequest,\n  CreateOfferCallSignal,\n  DisconnectPeerCallSignal,\n  isAddCandidateCallSignal,\n  isAnswerOfferCallSignal,\n  isCreateOfferCallSignal,\n  isDisconnectPeerCallSignal,\n  isSendDescriptionCallSignal,\n} from './call-signal';\nimport StompX from './stompx';\nimport { ChatKittyObserver, ChatKittyUnsubscribe } from './observer';\nimport {\n  CurrentUser,\n  GetCurrentUserResult,\n  GetCurrentUserSuccessfulResult,\n  UpdateCurrentUserDisplayPictureRequest,\n  UpdateCurrentUserDisplayPictureResult,\n  UpdateCurrentUserResult,\n  UpdatedCurrentUserDisplayPictureResult,\n  UpdatedCurrentUserResult,\n} from './current-user';\nimport {\n  DeleteMessageForMeRequest,\n  DeleteMessageForMeResult,\n  DeleteMessageForMeSucceededResult,\n  DeleteMessageRequest,\n  DeleteMessageResult,\n  DeleteMessageSucceededResult,\n  EditedMessageSucceededResult,\n  EditMessageRequest,\n  EditMessageResult,\n  FileUserMessage,\n  GetChannelMessagesRequest,\n  GetLastReadMessageRequest,\n  GetLastReadMessageResult,\n  GetMessageChannelRequest,\n  GetMessageChannelResult,\n  GetMessageChannelSucceededResult,\n  GetMessageParentRequest,\n  GetMessageParentResult,\n  GetMessageParentSucceededResult,\n  GetMessageRepliesCountRequest,\n  GetMessageRepliesRequest,\n  GetMessagesRequest,\n  GetMessagesResult,\n  GetMessagesSucceededResult,\n  GetUnreadMessagesCountRequest,\n  isFileMessage,\n  Message,\n  MessageNotAReplyError,\n  ReadMessageRequest,\n  ReadMessageResult,\n  ReadMessageSucceededResult,\n  SendChannelMessageRequest,\n  SendFileMessageRequest,\n  SendMessageReplyRequest,\n  SendMessageRequest,\n  SendMessageResult,\n  SendTextMessageRequest,\n  SendThreadMessageRequest,\n  SentFileMessageResult,\n  SentTextMessageResult,\n  TextUserMessage,\n} from './message';\nimport {\n  CreatedThreadResult,\n  CreateThreadRequest,\n  CreateThreadResult,\n  GetThreadChannelRequest,\n  GetThreadChannelResult,\n  GetThreadChannelSucceededResult,\n  GetThreadMessageRequest,\n  GetThreadMessageResult,\n  GetThreadMessageSucceededResult,\n  GetThreadsRequest,\n  GetThreadsResult,\n  GetThreadsSucceededResult,\n  ReadThreadRequest,\n  ReadThreadResult,\n  ReadThreadSucceededResult,\n  Thread,\n} from './thread';\nimport {\n  ChatKittyFailedResult,\n  failed,\n  GetCountResult,\n  GetCountSucceedResult,\n  succeeded,\n} from './result';\nimport {\n  BlockUserRequest,\n  BlockUserResult,\n  BlockUserSucceededResult,\n  ChatKittyUserReference,\n  GetUserIsChannelMemberRequest,\n  GetUserIsChannelMemberResult,\n  GetUserIsChannelMemberSucceededResult,\n  GetUserResult,\n  GetUsersRequest,\n  GetUsersResult,\n  GetUsersSucceededResult,\n  GetUserSucceededResult,\n  User,\n} from './user';\nimport {\n  AddChannelModeratorRequest,\n  AddChannelModeratorResult,\n  AddedChannelModeratorResult,\n  CannotAddModeratorToChannelError,\n  Channel,\n  ChannelNotInvitableError,\n  ChannelNotPubliclyJoinableError,\n  ClearChannelHistoryRequest,\n  ClearChannelHistoryResult,\n  ClearChannelHistorySucceededResult,\n  CreateChannelRequest,\n  CreateChannelResult,\n  CreatedChannelResult,\n  DeleteChannelRequest,\n  DeleteChannelResult,\n  DeletedChannelResult,\n  DirectChannel,\n  GetChannelMembersRequest,\n  GetChannelResult,\n  GetChannelsRequest,\n  GetChannelsResult,\n  GetChannelsSucceededResult,\n  GetChannelSucceededResult,\n  GetChannelUnreadRequest,\n  GetChannelUnreadResult,\n  GetChannelUnreadSucceededResult,\n  GetUnreadChannelsRequest,\n  HideChannelRequest,\n  HideChannelResult,\n  HideChannelSucceededResult,\n  InvitedUserResult,\n  InviteUserRequest,\n  InviteUserResult,\n  JoinChannelRequest,\n  JoinChannelResult,\n  JoinedChannelResult,\n  LeaveChannelRequest,\n  LeaveChannelResult,\n  LeftChannelResult,\n  MuteChannelRequest,\n  MuteChannelResult,\n  MutedChannelResult,\n  NotAChannelMemberError,\n  ReadChannelRequest,\n  ReadChannelResult,\n  ReadChannelSucceededResult,\n  UnmuteChannelRequest,\n  UnmuteChannelResult,\n  UnmutedChannelResult,\n  UpdateChannelRequest,\n  UpdateChannelResult,\n  UpdatedChannelResult,\n} from './channel';\nimport {\n  GetReactionsRequest,\n  GetReactionsResult,\n  GetReactionsSucceededResult,\n  ReactedToMessageResult,\n  Reaction,\n  ReactToMessageRequest,\n  ReactToMessageResult,\n  RemovedReactionResult,\n  RemoveReactionRequest,\n  RemoveReactionResult,\n} from './reaction';\nimport {\n  Keystrokes,\n  SendChannelKeystrokesRequest,\n  SendKeystrokesRequest,\n  SendThreadKeystrokesRequest,\n} from './keystrokes';\nimport {\n  GetReadReceiptsRequest,\n  GetReadReceiptsResult,\n  GetReadReceiptsSucceededResult,\n  ReadReceipt,\n} from './read-receipt';\nimport { ChatKittyPaginator } from './pagination';\nimport {\n  DeleteUserBlockListItemRequest,\n  DeleteUserBlockListItemResult,\n  DeleteUserBlockListItemSucceededResult,\n  GetUserBlockListResult,\n  GetUserBlockListSucceededResult,\n  UserBlockListItem,\n} from './user-block-list-item';\nimport {\n  TriggeredEventResult,\n  TriggerEventRequest,\n  TriggerEventResult,\n  Event,\n} from './event';\nimport {\n  ChatSession,\n  StartChatSessionRequest,\n  StartChatSessionResult,\n  StartedChatSessionResult,\n} from './chat-session';\nimport { debounceTime } from 'rxjs/operators';\nimport {\n  NoActiveSessionError,\n  SessionActiveError,\n  StartedSessionResult,\n  StartSessionRequest,\n  StartSessionResult,\n} from './user-session';\nimport {\n  ChatKittyUploadResult,\n  CreateChatKittyExternalFileProperties,\n  CreateChatKittyFileProperties,\n} from './file';\nimport { environment } from './environment/environment';\nimport { Notification } from './notification';\nimport {\n  GetUserMediaSettingsRequest,\n  GetUserMediaSettingsResult,\n  GetUserMediaSettingsSucceededResult,\n  UserMediaSettings,\n} from './user-media-settings';\n\nexport class ChatKitty {\n  private static readonly _instances = new Map<string, ChatKitty>();\n\n  public static getInstance(apiKey: string): ChatKitty {\n    let instance = ChatKitty._instances.get(apiKey);\n\n    if (instance !== undefined) {\n      return instance;\n    }\n\n    instance = new ChatKitty({ apiKey: apiKey });\n\n    ChatKitty._instances.set(apiKey, instance);\n\n    return instance;\n  }\n\n  private static channelRelay(id: number): string {\n    return '/application/v1/channels/' + id + '.relay';\n  }\n\n  private static userRelay(id: number): string {\n    return '/application/v1/users/' + id + '.relay';\n  }\n\n  private readonly stompX: StompX;\n\n  private readonly currentUserSubject = new BehaviorSubject<CurrentUser | null>(\n    null\n  );\n\n  private readonly lostConnectionSubject = new Subject<void>();\n  private readonly resumedConnectionSubject = new Subject<void>();\n\n  private writeFileGrant?: string;\n  private chatSessions: Map<number, ChatSession> = new Map();\n\n  private messageMapper: MessageMapper = new MessageMapper('');\n\n  private keyStrokesSubject = new Subject<SendKeystrokesRequest>();\n\n  currentUser?: CurrentUser;\n\n  public Calls: Calls = new (class ChatKittyCalls implements Calls {\n    private static callRelay(id: number): string {\n      return '/application/v1/calls/' + id + '.relay';\n    }\n\n    private static userMediaSettingsRelay(id: number): string {\n      return '/application/v1/users/' + id + '.media_settings.relay';\n    }\n\n    public localStream: MediaStream | null = null;\n\n    public currentCall: Call | null = null;\n\n    public isMuted: boolean = false;\n\n    public isCameraOn: boolean = false;\n\n    private configuration: {\n      media: { audio: boolean; video: boolean };\n    } | null = null;\n\n    private readonly participantAcceptedCallSubject = new Subject<User>();\n    private readonly participantDeclinedCallSubject = new Subject<User>();\n    private readonly participantActiveSubject = new Subject<{\n      user: User;\n      stream: MediaStream;\n    }>();\n    private readonly participantLeftCallSubject = new Subject<User>();\n    private readonly participantMediaSettingsUpdatedSubject =\n      new Subject<UserMediaSettings>();\n\n    private readonly callEndedSubject = new Subject<Call>();\n\n    private endCallUnsubscribe?: ChatKittyUnsubscribe;\n\n    constructor(private readonly kitty: ChatKitty) {}\n\n    public async initialize(configuration: {\n      media: { audio: boolean; video: boolean };\n    }) {\n      const isFrontCamera = true;\n      const devices = await mediaDevices.enumerateDevices();\n\n      const facing = isFrontCamera ? 'front' : 'environment';\n      const videoSourceId = devices.find(\n        (device: any) =>\n          device.kind === 'videoinput' && device.facing === facing\n      );\n\n      const facingMode = isFrontCamera ? 'user' : 'environment';\n      const constraints: MediaStreamConstraints = {\n        audio: configuration.media.audio,\n        video: configuration.media.video && {\n          mandatory: {\n            minWidth: 1280,\n            minHeight: 720,\n            minFrameRate: 30,\n          },\n          facingMode,\n          optional: videoSourceId ? [{ sourceId: videoSourceId }] : [],\n        },\n      };\n\n      this.configuration = configuration;\n\n      this.localStream = (await mediaDevices.getUserMedia(\n        constraints\n      )) as MediaStream;\n\n      this.isMuted = !configuration.media.audio;\n      this.isCameraOn = configuration.media.video;\n\n      if (this.kitty.currentUser) {\n        this.kitty.stompX.sendAction({\n          destination:\n            this.kitty.currentUser._actions.updateMediaSettingsAudioEnabled,\n          body: { enabled: !this.isMuted },\n        });\n\n        this.kitty.stompX.sendAction({\n          destination:\n            this.kitty.currentUser._actions.updateMediaSettingsVideoEnabled,\n          body: { enabled: this.isCameraOn },\n        });\n      }\n    }\n\n    public startCall(request: StartCallRequest): Promise<StartCallResult> {\n      return new Promise(async (resolve) => {\n        const type = (request as { type: string }).type;\n\n        let channel: Channel = (request as { channel: Channel }).channel;\n\n        if (!channel) {\n          const members = (request as { members: ChatKittyUserReference[] })\n            .members;\n\n          const result = await this.kitty.createChannel({\n            type: 'DIRECT',\n            members,\n          });\n\n          if (succeeded(result)) {\n            channel = result.channel;\n          }\n\n          if (failed(result)) {\n            resolve(result);\n          }\n        }\n\n        this.kitty.stompX.sendAction<Call>({\n          destination: channel._actions.call,\n          body: {\n            type,\n            properties: request.properties,\n          },\n          onSuccess: (call) => {\n            this.startCallSession(call).then(() =>\n              resolve(new StartedCallResult(call))\n            );\n          },\n          onError: (error) => {\n            resolve(new ChatKittyFailedResult(error));\n          },\n        });\n      });\n    }\n\n    public acceptCall(request: AcceptCallRequest): Promise<AcceptCallResult> {\n      return new Promise((resolve) => {\n        this.startCallSession(request.call).then(() => {\n          resolve(new AcceptedCallResult(request.call));\n        });\n      });\n    }\n\n    public declineCall(\n      request: DeclineCallRequest\n    ): Promise<DeclineCallResult> {\n      return new Promise((resolve) => {\n        this.kitty.stompX.sendAction<never>({\n          destination: request.call._actions.decline,\n          body: {},\n          onSuccess: (call) => {\n            resolve(new DeclinedCallResult(call));\n          },\n          onError: (error) => {\n            resolve(new ChatKittyFailedResult(error));\n          },\n        });\n      });\n    }\n\n    public leaveCall() {\n      this.endCallUnsubscribe?.();\n    }\n\n    switchCamera = () => {\n      if (this.localStream) {\n        this.localStream\n          .getVideoTracks()\n          // @ts-ignore\n          .forEach((track) => track._switchCamera());\n      }\n    };\n\n    toggleMute = () => {\n      if (this.localStream) {\n        this.localStream.getAudioTracks().forEach((track) => {\n          track.enabled = !track.enabled;\n\n          this.isMuted = !track.enabled;\n        });\n\n        if (this.kitty.currentUser) {\n          this.kitty.stompX.sendAction({\n            destination:\n              this.kitty.currentUser._actions.updateMediaSettingsAudioEnabled,\n            body: { enabled: !this.isMuted },\n          });\n        }\n      }\n    };\n\n    toggleCamera = () => {\n      if (this.localStream) {\n        this.localStream.getVideoTracks().forEach((track) => {\n          track.enabled = !track.enabled;\n\n          this.isCameraOn = track.enabled;\n        });\n\n        if (this.kitty.currentUser) {\n          this.kitty.stompX.sendAction({\n            destination:\n              this.kitty.currentUser._actions.updateMediaSettingsVideoEnabled,\n            body: { enabled: this.isCameraOn },\n          });\n        }\n      }\n    };\n\n    public getCalls(request: GetCallsRequest): Promise<GetCallsResult> {\n      const parameters: { active?: boolean } = {};\n\n      const active = request?.filter?.active;\n\n      if (active) {\n        parameters.active = active;\n      }\n\n      return new Promise((resolve) => {\n        ChatKittyPaginator.createInstance<Call>({\n          stompX: this.kitty.stompX,\n          relay: request.channel._relays.calls,\n          contentName: 'calls',\n          parameters: parameters,\n        })\n          .then((paginator) => resolve(new GetCallsSucceededResult(paginator)))\n          .catch((error) => resolve(new ChatKittyFailedResult(error)));\n      });\n    }\n\n    public getCall(id: number): Promise<GetCallResult> {\n      return new Promise((resolve) => {\n        this.kitty.stompX.relayResource<Call>({\n          destination: ChatKittyCalls.callRelay(id),\n          onSuccess: (call) => {\n            resolve(new GetCallSucceededResult(call));\n          },\n          onError: (error) => {\n            resolve(new ChatKittyFailedResult(error));\n          },\n        });\n      });\n    }\n\n    public getCurrentCallParticipants(): Promise<GetUsersResult> {\n      const currentCall = this.currentCall;\n\n      if (!currentCall) {\n        throw new NoActiveCallError();\n      }\n\n      return new Promise((resolve) => {\n        ChatKittyPaginator.createInstance<User>({\n          stompX: this.kitty.stompX,\n          relay: currentCall._relays.participants,\n          contentName: 'users',\n        })\n          .then((paginator) => resolve(new GetUsersSucceededResult(paginator)))\n          .catch((error) => resolve(new ChatKittyFailedResult(error)));\n      });\n    }\n\n    public getUserMediaSettings(\n      request: GetUserMediaSettingsRequest\n    ): Promise<GetUserMediaSettingsResult> {\n      return new Promise((resolve) => {\n        this.kitty.stompX.relayResource<UserMediaSettings>({\n          destination: ChatKittyCalls.userMediaSettingsRelay(request.user.id),\n          onSuccess: (settings) => {\n            resolve(new GetUserMediaSettingsSucceededResult(settings));\n          },\n          onError: (error) => {\n            resolve(new ChatKittyFailedResult(error));\n          },\n        });\n      });\n    }\n\n    public onCallInvite(\n      onNextOrObserver: ChatKittyObserver<Call> | ((call: Call) => void)\n    ): ChatKittyUnsubscribe {\n      const user = this.kitty.currentUser;\n\n      if (!user) {\n        throw new NoActiveSessionError();\n      }\n\n      const unsubscribe = this.kitty.stompX.listenForEvent<Call>({\n        topic: user._topics.calls,\n        event: 'user.call.invited',\n        onSuccess: (call) => {\n          if (typeof onNextOrObserver === 'function') {\n            onNextOrObserver(call);\n          } else {\n            onNextOrObserver.onNext(call);\n          }\n        },\n      });\n\n      return () => unsubscribe;\n    }\n\n    public onCallActive(\n      onNextOrObserver: ChatKittyObserver<Call> | ((call: Call) => void)\n    ): ChatKittyUnsubscribe {\n      const user = this.kitty.currentUser;\n\n      if (!user) {\n        throw new NoActiveSessionError();\n      }\n\n      const unsubscribe = this.kitty.stompX.listenForEvent<Call>({\n        topic: user._topics.calls,\n        event: 'user.call.active',\n        onSuccess: (call) => {\n          if (typeof onNextOrObserver === 'function') {\n            onNextOrObserver(call);\n          } else {\n            onNextOrObserver.onNext(call);\n          }\n        },\n      });\n\n      return () => unsubscribe;\n    }\n\n    public onParticipantAcceptedCall(\n      onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)\n    ): ChatKittyUnsubscribe {\n      const subscription = this.participantAcceptedCallSubject.subscribe(\n        (user) => {\n          if (typeof onNextOrObserver === 'function') {\n            onNextOrObserver(user);\n          } else {\n            onNextOrObserver.onNext(user);\n          }\n        }\n      );\n\n      return () => subscription.unsubscribe();\n    }\n\n    public onParticipantDeclinedCall(\n      onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)\n    ): ChatKittyUnsubscribe {\n      const subscription = this.participantDeclinedCallSubject.subscribe(\n        (user) => {\n          if (typeof onNextOrObserver === 'function') {\n            onNextOrObserver(user);\n          } else {\n            onNextOrObserver.onNext(user);\n          }\n        }\n      );\n\n      return () => subscription.unsubscribe();\n    }\n\n    public onParticipantActive(\n      onNextOrObserver:\n        | ChatKittyObserver<{ user: User; stream: MediaStream }>\n        | ((user: User, stream: MediaStream) => void)\n    ): ChatKittyUnsubscribe {\n      const subscription = this.participantActiveSubject.subscribe((event) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(event.user, event.stream);\n        } else {\n          onNextOrObserver.onNext(event);\n        }\n      });\n\n      return () => subscription.unsubscribe();\n    }\n\n    public onParticipantMediaSettingsUpdated(\n      onNextOrObserver:\n        | ChatKittyObserver<UserMediaSettings>\n        | ((settings: UserMediaSettings) => void)\n    ): ChatKittyUnsubscribe {\n      const subscription =\n        this.participantMediaSettingsUpdatedSubject.subscribe((settings) => {\n          if (typeof onNextOrObserver === 'function') {\n            onNextOrObserver(settings);\n          } else {\n            onNextOrObserver.onNext(settings);\n          }\n        });\n\n      return () => subscription.unsubscribe();\n    }\n\n    public onParticipantLeftCall(\n      onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)\n    ): ChatKittyUnsubscribe {\n      const subscription = this.participantLeftCallSubject.subscribe((user) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(user);\n        } else {\n          onNextOrObserver.onNext(user);\n        }\n      });\n\n      return () => subscription.unsubscribe();\n    }\n\n    public onCallEnded(\n      onNextOrObserver: ChatKittyObserver<Call> | ((call: Call) => void)\n    ): ChatKittyUnsubscribe {\n      const subscription = this.callEndedSubject.subscribe((call) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(call);\n        } else {\n          onNextOrObserver.onNext(call);\n        }\n      });\n\n      return () => subscription.unsubscribe();\n    }\n\n    public close() {\n      this.endCallUnsubscribe?.();\n      this.localStream?.release();\n    }\n\n    private startCallSession(call: Call): Promise<void> {\n      return new Promise((resolve) => {\n        let participantAcceptedCallUnsubscribe: () => void;\n        let participantDeclinedCallUnsubscribe: () => void;\n        let participantLeftCallUnsubscribe: () => void;\n        let userMediaSettingsUpdatedUnsubscribe: () => void;\n\n        participantAcceptedCallUnsubscribe =\n          this.kitty.stompX.listenForEvent<User>({\n            topic: call._topics.participants,\n            event: 'call.participant.accepted',\n            onSuccess: (user) => {\n              this.participantAcceptedCallSubject.next(user);\n            },\n          });\n\n        participantDeclinedCallUnsubscribe =\n          this.kitty.stompX.listenForEvent<User>({\n            topic: call._topics.participants,\n            event: 'call.participant.declined',\n            onSuccess: (user) => {\n              this.participantDeclinedCallSubject.next(user);\n            },\n          });\n\n        participantLeftCallUnsubscribe = this.kitty.stompX.listenForEvent<User>(\n          {\n            topic: call._topics.participants,\n            event: 'call.participant.left',\n            onSuccess: (user) => {\n              this.participantLeftCallSubject.next(user);\n            },\n          }\n        );\n\n        userMediaSettingsUpdatedUnsubscribe =\n          this.kitty.stompX.listenForEvent<UserMediaSettings>({\n            topic: call._topics.userMediaSettings,\n            event: 'call.user_media_settings.updated',\n            onSuccess: (settings) => {\n              this.participantMediaSettingsUpdatedSubject.next(settings);\n            },\n          });\n\n        const signalSubject: Subject<CallSignal> = new Subject<CallSignal>();\n\n        const signalDispatcher = new CallSignalDispatcher(\n          this.kitty.stompX,\n          call\n        );\n\n        const receivedCallSignalUnsubscribe =\n          this.kitty.stompX.listenForEvent<CallSignal>({\n            topic: call._topics.signals,\n            event: 'call.signal.created',\n            onSuccess: (signal) => {\n              signalSubject.next(signal);\n            },\n          });\n\n        let end = () => {\n          userMediaSettingsUpdatedUnsubscribe?.();\n          participantLeftCallUnsubscribe?.();\n          participantDeclinedCallUnsubscribe?.();\n          participantAcceptedCallUnsubscribe?.();\n\n          receivedCallSignalUnsubscribe();\n\n          signalsSubscription.unsubscribe();\n        };\n\n        const connections: Map<number, Connection> = new Map();\n\n        const endedCallUnsubscribe = this.kitty.stompX.listenForEvent<Call>({\n          topic: call._topics.self,\n          event: 'call.self.ended',\n          onSuccess: (endedCall) => {\n            end();\n\n            connections.forEach((connection) => connection.close());\n\n            connections.clear();\n\n            this.callEndedSubject.next(endedCall);\n          },\n        });\n\n        const activeCallUnsubscribe = this.kitty.stompX.listenForEvent<Call>({\n          topic: call._topics.self,\n          event: 'call.self.active',\n          onSuccess: (c) => {\n            this.currentCall = c;\n          },\n        });\n\n        const onCreateOffer = async (\n          signal: CreateOfferCallSignal\n        ): Promise<void> => {\n          const peer = signal.peer;\n\n          if (connections.has(peer.id)) {\n            return;\n          }\n\n          const connection: Connection = new P2PConnection(\n            peer,\n            <MediaStream>this.localStream,\n            signalDispatcher,\n            (user: User, stream: MediaStream) =>\n              this.participantActiveSubject.next({ user, stream })\n          );\n\n          await connection.createOffer();\n\n          connections.set(peer.id, connection);\n        };\n\n        const onAnswerOffer = (signal: AnswerOfferCallSignal): void => {\n          const peer = signal.peer;\n\n          if (connections.has(peer.id)) {\n            return;\n          }\n\n          const connection = new P2PConnection(\n            peer,\n            <MediaStream>this.localStream,\n            signalDispatcher,\n            (user: User, stream: MediaStream) =>\n              this.participantActiveSubject.next({ user, stream })\n          );\n\n          connections.set(peer.id, connection);\n        };\n\n        const onDisconnect = (signal: DisconnectPeerCallSignal): void => {\n          const connection = connections.get(signal.peer.id);\n\n          if (connection) {\n            connection.close();\n          }\n        };\n\n        const signalsSubscription = signalSubject.subscribe({\n          next: async (signal) => {\n            try {\n              if (isCreateOfferCallSignal(signal)) {\n                await onCreateOffer(signal);\n              }\n\n              if (isAnswerOfferCallSignal(signal)) {\n                await onAnswerOffer(signal);\n              }\n\n              if (isAddCandidateCallSignal(signal)) {\n                const connection = connections.get(signal.peer.id);\n\n                if (connection) {\n                  await connection.addCandidate(signal.payload);\n                }\n              }\n\n              if (isSendDescriptionCallSignal(signal)) {\n                const connection = connections.get(signal.peer.id);\n\n                if (connection) {\n                  await connection.answerOffer(signal.payload);\n                }\n              }\n\n              if (isDisconnectPeerCallSignal(signal)) {\n                await onDisconnect(signal);\n              }\n            } catch (e) {\n              console.log(e);\n            }\n          },\n        });\n\n        const callUnsubscribe = this.kitty.stompX.listenToTopic({\n          topic: call._topics.self,\n          onSuccess: () => {\n            const participantsUnsubscribe = this.kitty.stompX.listenToTopic({\n              topic: call._topics.participants,\n            });\n\n            const userMediaSettingsUnsubscribe =\n              this.kitty.stompX.listenToTopic({\n                topic: call._topics.userMediaSettings,\n              });\n\n            const signalsUnsubscribe = this.kitty.stompX.listenToTopic({\n              topic: call._topics.signals,\n            });\n\n            const superEnd = end;\n\n            end = () => {\n              superEnd();\n\n              participantsUnsubscribe();\n              userMediaSettingsUnsubscribe();\n              signalsUnsubscribe();\n              activeCallUnsubscribe();\n              endedCallUnsubscribe();\n\n              callUnsubscribe();\n            };\n\n            this.kitty.stompX.sendAction<never>({\n              destination: call._actions.ready,\n              body: {},\n              onSent: () => {\n                this.currentCall = call;\n\n                this.endCallUnsubscribe = () => {\n                  end();\n\n                  if (this.configuration) {\n                    this.isMuted = !this.configuration.media.audio;\n                    this.isCameraOn = this.configuration.media.video;\n                  }\n\n                  this.currentCall = null;\n                  this.endCallUnsubscribe = undefined;\n                };\n\n                resolve();\n              },\n            });\n          },\n        });\n      });\n    }\n  })(this);\n\n  public constructor(private readonly configuration: ChatKittyConfiguration) {\n    this.stompX = new StompX({\n      isSecure: configuration.isSecure === undefined || configuration.isSecure,\n      host: configuration.host || 'api.chatkitty.com',\n      isDebug: !environment.production,\n    });\n\n    this.keyStrokesSubject\n      .asObservable()\n      .pipe(debounceTime(150))\n      .subscribe((request) => {\n        let destination = '';\n\n        const channel = (request as SendChannelKeystrokesRequest).channel;\n        const thread = (request as SendThreadKeystrokesRequest).thread;\n\n        if (channel) {\n          destination = channel._actions.keystrokes;\n        }\n\n        if (thread) {\n          destination = thread._actions.keystrokes;\n        }\n\n        this.stompX.sendAction<never>({\n          destination,\n          body: {\n            keys: request.keys,\n          },\n        });\n      });\n  }\n\n  public startSession(\n    request: StartSessionRequest\n  ): Promise<StartSessionResult> {\n    if (this.stompX.initialized) {\n      throw new SessionActiveError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.connect<CurrentUser>({\n        apiKey: this.configuration.apiKey,\n        username: request.username,\n        authParams: request.authParams,\n        onSuccess: (user, writeFileGrant, readFileGrant) => {\n          this.stompX.listenToTopic({ topic: user._topics.self });\n          this.stompX.listenToTopic({ topic: user._topics.channels });\n          this.stompX.listenToTopic({ topic: user._topics.messages });\n          this.stompX.listenToTopic({ topic: user._topics.notifications });\n          this.stompX.listenToTopic({ topic: user._topics.contacts });\n          this.stompX.listenToTopic({ topic: user._topics.participants });\n          this.stompX.listenToTopic({ topic: user._topics.users });\n          this.stompX.listenToTopic({ topic: user._topics.reactions });\n          this.stompX.listenToTopic({ topic: user._topics.threads });\n          this.stompX.listenToTopic({ topic: user._topics.calls });\n\n          this.writeFileGrant = writeFileGrant;\n\n          this.messageMapper = new MessageMapper(readFileGrant);\n\n          resolve(new StartedSessionResult({ user: user }));\n        },\n        onConnected: (user) => {\n          this.currentUser = user;\n\n          this.currentUserSubject.next(user);\n        },\n        onConnectionLost: () => this.lostConnectionSubject.next(),\n        onConnectionResumed: () => this.resumedConnectionSubject.next(),\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public endSession(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.stompX.disconnect({\n        onSuccess: () => {\n          this.currentUser = undefined;\n          this.currentUserSubject.next(null);\n\n          resolve();\n        },\n        onError: (e) => {\n          reject(e);\n        },\n      });\n    });\n  }\n\n  public getCurrentUser(): Promise<GetCurrentUserResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.relayResource<CurrentUser>({\n        destination: currentUser._relays.self,\n        onSuccess: (user) => {\n          resolve(new GetCurrentUserSuccessfulResult(user));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public onCurrentUserChanged(\n    onNextOrObserver:\n      | ChatKittyObserver<CurrentUser | null>\n      | ((user: CurrentUser | null) => void)\n  ): ChatKittyUnsubscribe {\n    const subscription = this.currentUserSubject.subscribe((user) => {\n      if (typeof onNextOrObserver === 'function') {\n        onNextOrObserver(user);\n      } else {\n        onNextOrObserver.onNext(user);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }\n\n  public onCurrentUserOnline(\n    onNextOrObserver: ChatKittyObserver<CurrentUser> | (() => void)\n  ): ChatKittyUnsubscribe {\n    const subscription = this.resumedConnectionSubject.subscribe(() => {\n      if (typeof onNextOrObserver === 'function') {\n        onNextOrObserver();\n      } else {\n        if (this.currentUser) {\n          onNextOrObserver.onNext(this.currentUser);\n        }\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }\n\n  public onCurrentUserOffline(\n    onNextOrObserver: ChatKittyObserver<CurrentUser> | (() => void)\n  ): ChatKittyUnsubscribe {\n    const subscription = this.lostConnectionSubject.subscribe(() => {\n      if (typeof onNextOrObserver === 'function') {\n        onNextOrObserver();\n      } else {\n        if (this.currentUser) {\n          onNextOrObserver.onNext(this.currentUser);\n        }\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }\n\n  public updateCurrentUser(\n    update: (user: CurrentUser) => CurrentUser\n  ): Promise<UpdateCurrentUserResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<CurrentUser>({\n        destination: currentUser._actions.update,\n        body: update(currentUser),\n        onSuccess: (user) => {\n          this.currentUserSubject.next(user);\n\n          resolve(new UpdatedCurrentUserResult(user));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public updateCurrentUserDisplayPicture(\n    request: UpdateCurrentUserDisplayPictureRequest\n  ): Promise<UpdateCurrentUserDisplayPictureResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      const file = request.file;\n\n      // eslint-disable-next-line no-undef\n      if (file instanceof Blob) {\n        this.stompX.sendToStream<CurrentUser>({\n          stream: currentUser._streams.displayPicture,\n          grant: <string>this.writeFileGrant,\n          blob: file,\n          onSuccess: (user) => {\n            resolve(new UpdatedCurrentUserDisplayPictureResult(user));\n          },\n          onError: (error) => {\n            resolve(new ChatKittyFailedResult(error));\n          },\n          progressListener: {\n            onStarted: () => request.progressListener?.onStarted?.(),\n            onProgress: (progress) =>\n              request.progressListener?.onProgress(progress),\n            onCompleted: () =>\n              request.progressListener?.onCompleted(\n                ChatKittyUploadResult.COMPLETED\n              ),\n            onFailed: () =>\n              request.progressListener?.onCompleted(\n                ChatKittyUploadResult.FAILED\n              ),\n            onCancelled: () =>\n              request.progressListener?.onCompleted(\n                ChatKittyUploadResult.CANCELLED\n              ),\n          },\n        });\n      } else {\n        this.stompX.sendAction<CurrentUser>({\n          destination: currentUser._actions.updateDisplayPicture,\n          body: file,\n          onSuccess: (user) => {\n            resolve(new UpdatedCurrentUserResult(user));\n          },\n          onError: (error) => {\n            resolve(new ChatKittyFailedResult(error));\n          },\n        });\n      }\n    });\n  }\n\n  public updateChannel(\n    request: UpdateChannelRequest\n  ): Promise<UpdateChannelResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Channel>({\n        destination: request.channel._actions.update,\n        body: request.channel,\n        onSuccess: (channel) => {\n          resolve(new UpdatedChannelResult(channel));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public deleteChannel(\n    request: DeleteChannelRequest\n  ): Promise<DeleteChannelResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<void>({\n        destination: request.channel._actions.delete,\n        body: {},\n        onSuccess: () => {\n          resolve(new DeletedChannelResult());\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public createChannel(\n    request: CreateChannelRequest\n  ): Promise<CreateChannelResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Channel>({\n        destination: currentUser._actions.createChannel,\n        events: [\n          'user.channel.created',\n          'user.channel.upserted',\n          'member.channel.upserted',\n        ],\n        body: request,\n        onSuccess: (channel) => {\n          resolve(new CreatedChannelResult(channel));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public getChannels(request?: GetChannelsRequest): Promise<GetChannelsResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      const parameters: { subscribable?: boolean; name?: string } = {};\n\n      let relay = currentUser._relays.channels;\n\n      if (isGetChannelsRequest(request)) {\n        if (request.filter?.joined === false) {\n          relay = currentUser._relays.joinableChannels;\n        }\n\n        if (request.filter?.joined === true) {\n          parameters.subscribable = true;\n        }\n\n        if (request.filter?.unread) {\n          relay = currentUser._relays.unreadChannels;\n        }\n      }\n\n      const name = request?.filter?.name;\n\n      if (name) {\n        parameters.name = name;\n      }\n\n      ChatKittyPaginator.createInstance<Channel>({\n        stompX: this.stompX,\n        relay: relay,\n        contentName: 'channels',\n        parameters: parameters,\n      })\n        .then((paginator) => resolve(new GetChannelsSucceededResult(paginator)))\n        .catch((error) => resolve(new ChatKittyFailedResult(error)));\n    });\n  }\n\n  public getChannel(id: number): Promise<GetChannelResult> {\n    return new Promise((resolve) => {\n      this.stompX.relayResource<Channel>({\n        destination: ChatKitty.channelRelay(id),\n        onSuccess: (channel) => {\n          resolve(new GetChannelSucceededResult(channel));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public joinChannel(request: JoinChannelRequest): Promise<JoinChannelResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const destination = request.channel._actions.join;\n\n    if (!destination) {\n      throw new ChannelNotPubliclyJoinableError(request.channel);\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Channel>({\n        destination: destination,\n        body: request,\n        onSuccess: (channel) => {\n          resolve(new JoinedChannelResult(channel));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public leaveChannel(\n    request: LeaveChannelRequest\n  ): Promise<LeaveChannelResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const destination = request.channel._actions.leave;\n\n    if (!destination) {\n      throw new NotAChannelMemberError(request.channel);\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Channel>({\n        destination: destination,\n        body: {},\n        onSuccess: (channel) => {\n          resolve(new LeftChannelResult(channel));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public addChannelModerator(\n    request: AddChannelModeratorRequest\n  ): Promise<AddChannelModeratorResult> {\n    const destination = request.channel._actions.addModerator;\n\n    if (!destination) {\n      throw new CannotAddModeratorToChannelError(request.channel);\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Channel>({\n        destination: destination,\n        body: request.user,\n        onSuccess: (channel) => {\n          resolve(new AddedChannelModeratorResult(channel));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public getUnreadChannelsCount(\n    request?: GetUnreadChannelsRequest\n  ): Promise<GetCountResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const parameters: { unread: true; type?: string } = {\n      unread: true,\n    };\n\n    if (isGetChannelsUnreadRequest(request)) {\n      parameters.type = request.filter?.type;\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.relayResource<{ count: number }>({\n        destination: currentUser._relays.channelsCount,\n        parameters: parameters,\n        onSuccess: (resource) => {\n          resolve(new GetCountSucceedResult(resource.count));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public getChannelUnread(\n    request: GetChannelUnreadRequest\n  ): Promise<GetChannelUnreadResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.relayResource<{ exists: boolean }>({\n        destination: request.channel._relays.unread,\n        onSuccess: (resource) => {\n          resolve(new GetChannelUnreadSucceededResult(resource.exists));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public readChannel(request: ReadChannelRequest): Promise<ReadChannelResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<never>({\n        destination: request.channel._actions.read,\n        body: {},\n        onSent: () => resolve(new ReadChannelSucceededResult(request.channel)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public muteChannel(request: MuteChannelRequest): Promise<MuteChannelResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Channel>({\n        destination: request.channel._actions.mute,\n        body: {\n          state: 'ON',\n        },\n        onSuccess: (channel) => {\n          resolve(new MutedChannelResult(channel));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public unmuteChannel(\n    request: UnmuteChannelRequest\n  ): Promise<UnmuteChannelResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Channel>({\n        destination: request.channel._actions.mute,\n        body: {\n          state: 'OFF',\n        },\n        onSuccess: (channel) => {\n          resolve(new UnmutedChannelResult(channel));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public clearChannelHistory(\n    request: ClearChannelHistoryRequest\n  ): Promise<ClearChannelHistoryResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<never>({\n        destination: request.channel._actions.clearHistory,\n        body: {},\n        onSuccess: (channel) =>\n          resolve(new ClearChannelHistorySucceededResult(channel)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public hideChannel(request: HideChannelRequest): Promise<HideChannelResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<DirectChannel>({\n        destination: request.channel._actions.hide,\n        body: {},\n        onSuccess: (resource) =>\n          resolve(new HideChannelSucceededResult(resource)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public startChatSession(\n    request: StartChatSessionRequest\n  ): StartChatSessionResult {\n    const onReceivedMessage = request.onReceivedMessage;\n    const onReceivedKeystrokes = request.onReceivedKeystrokes;\n    const onParticipantEnteredChat = request.onParticipantEnteredChat;\n    const onParticipantLeftChat = request.onParticipantLeftChat;\n    const onTypingStarted = request.onTypingStarted;\n    const onTypingStopped = request.onTypingStopped;\n    const onParticipantPresenceChanged = request.onParticipantPresenceChanged;\n    const onEventTriggered = request.onEventTriggered;\n    const onMessageUpdated = request.onMessageUpdated;\n    const onChannelUpdated = request.onChannelUpdated;\n    const onMessageRead = request.onMessageRead;\n    const onMessageReactionAdded = request.onMessageReactionAdded;\n    const onMessageReactionRemoved = request.onMessageReactionRemoved;\n    const onThreadReceivedMessage = request.onThreadReceivedMessage;\n    const onThreadReceivedKeystrokes = request.onThreadReceivedKeystrokes;\n    const onThreadTypingStarted = request.onThreadTypingStarted;\n    const onThreadTypingStopped = request.onThreadTypingStopped;\n\n    let receivedMessageUnsubscribe: () => void;\n    let receivedKeystrokesUnsubscribe: () => void;\n    let participantEnteredChatUnsubscribe: () => void;\n    let participantLeftChatUnsubscribe: () => void;\n    let typingStartedUnsubscribe: () => void;\n    let typingStoppedUnsubscribe: () => void;\n    let participantPresenceChangedUnsubscribe: () => void;\n    let eventTriggeredUnsubscribe: () => void;\n    let messageUpdatedUnsubscribe: () => void;\n    let channelUpdatedUnsubscribe: () => void;\n    let messageReadUnsubscribe: () => void;\n    let messageReactionAddedUnsubscribe: () => void;\n    let messageReactionRemovedUnsubscribe: () => void;\n    let threadReceivedMessageUnsubscribe: () => void;\n    let threadReceivedKeystrokesUnsubscribe: () => void;\n    let threadTypingStartedUnsubscribe: () => void;\n    let threadTypingStoppedUnsubscribe: () => void;\n\n    if (onReceivedMessage) {\n      receivedMessageUnsubscribe = this.stompX.listenForEvent<Message>({\n        topic: request.channel._topics.messages,\n        event: 'channel.message.created',\n        onSuccess: (message) => {\n          const destination = message._relays.parent;\n\n          if (destination) {\n            this.stompX.relayResource<Message>({\n              destination,\n              onSuccess: (parent) => {\n                onReceivedMessage(\n                  this.messageMapper.map(message),\n                  this.messageMapper.map(parent)\n                );\n              },\n            });\n          } else {\n            onReceivedMessage(this.messageMapper.map(message));\n          }\n        },\n      });\n    }\n\n    if (onReceivedKeystrokes) {\n      receivedKeystrokesUnsubscribe = this.stompX.listenForEvent<Keystrokes>({\n        topic: request.channel._topics.keystrokes,\n        event: 'thread.keystrokes.created',\n        onSuccess: (keystrokes) => {\n          onReceivedKeystrokes(keystrokes);\n        },\n      });\n    }\n\n    if (onTypingStarted) {\n      typingStartedUnsubscribe = this.stompX.listenForEvent<User>({\n        topic: request.channel._topics.typing,\n        event: 'thread.typing.started',\n        onSuccess: (user) => {\n          onTypingStarted(user);\n        },\n      });\n    }\n\n    if (onTypingStopped) {\n      typingStoppedUnsubscribe = this.stompX.listenForEvent<User>({\n        topic: request.channel._topics.typing,\n        event: 'thread.typing.stopped',\n        onSuccess: (user) => {\n          onTypingStopped(user);\n        },\n      });\n    }\n\n    if (onParticipantEnteredChat) {\n      participantEnteredChatUnsubscribe = this.stompX.listenForEvent<User>({\n        topic: request.channel._topics.participants,\n        event: 'channel.participant.active',\n        onSuccess: (user) => {\n          onParticipantEnteredChat(user);\n        },\n      });\n    }\n\n    if (onParticipantLeftChat) {\n      participantLeftChatUnsubscribe = this.stompX.listenForEvent<User>({\n        topic: request.channel._topics.participants,\n        event: 'channel.participant.inactive',\n        onSuccess: (user) => {\n          onParticipantLeftChat(user);\n        },\n      });\n    }\n\n    if (onParticipantPresenceChanged) {\n      participantPresenceChangedUnsubscribe = this.stompX.listenForEvent<User>({\n        topic: request.channel._topics.participants,\n        event: 'participant.presence.changed',\n        onSuccess: (user) => {\n          onParticipantPresenceChanged(user);\n        },\n      });\n    }\n\n    if (onMessageUpdated) {\n      messageUpdatedUnsubscribe = this.stompX.listenForEvent<Message>({\n        topic: request.channel._topics.messages,\n        event: 'channel.message.updated',\n        onSuccess: (message) => {\n          onMessageUpdated(message);\n        },\n      });\n    }\n\n    if (onEventTriggered) {\n      eventTriggeredUnsubscribe = this.stompX.listenForEvent<Event>({\n        topic: request.channel._topics.events,\n        event: 'channel.event.triggered',\n        onSuccess: (event) => {\n          onEventTriggered(event);\n        },\n      });\n    }\n\n    if (onChannelUpdated) {\n      channelUpdatedUnsubscribe = this.stompX.listenForEvent<Channel>({\n        topic: request.channel._topics.self,\n        event: 'channel.self.updated',\n        onSuccess: (channel) => {\n          onChannelUpdated(channel);\n        },\n      });\n    }\n\n    if (onMessageRead) {\n      messageReadUnsubscribe = this.stompX.listenForEvent<ReadReceipt>({\n        topic: request.channel._topics.readReceipts,\n        event: 'message.read_receipt.created',\n        onSuccess: (receipt) => {\n          this.stompX.relayResource<Message>({\n            destination: receipt._relays.message,\n            onSuccess: (message) => {\n              onMessageRead(message, receipt);\n            },\n          });\n        },\n      });\n    }\n\n    if (onMessageReactionAdded) {\n      messageReactionAddedUnsubscribe = this.stompX.listenForEvent<Reaction>({\n        topic: request.channel._topics.reactions,\n        event: 'message.reaction.created',\n        onSuccess: (reaction) => {\n          this.stompX.relayResource<Message>({\n            destination: reaction._relays.message,\n            onSuccess: (message) => {\n              onMessageReactionAdded(message, reaction);\n            },\n          });\n        },\n      });\n    }\n\n    if (onMessageReactionRemoved) {\n      messageReactionRemovedUnsubscribe = this.stompX.listenForEvent<Reaction>({\n        topic: request.channel._topics.reactions,\n        event: 'message.reaction.removed',\n        onSuccess: (reaction) => {\n          this.stompX.relayResource<Message>({\n            destination: reaction._relays.message,\n            onSuccess: (message) => {\n              onMessageReactionRemoved(message, reaction);\n            },\n          });\n        },\n      });\n    }\n\n    let end = () => {\n      messageReactionRemovedUnsubscribe?.();\n      messageReactionAddedUnsubscribe?.();\n      messageReadUnsubscribe?.();\n      channelUpdatedUnsubscribe?.();\n      messageUpdatedUnsubscribe?.();\n      eventTriggeredUnsubscribe?.();\n      participantPresenceChangedUnsubscribe?.();\n      participantLeftChatUnsubscribe?.();\n      participantEnteredChatUnsubscribe?.();\n      typingStoppedUnsubscribe?.();\n      typingStartedUnsubscribe?.();\n      receivedKeystrokesUnsubscribe?.();\n      receivedMessageUnsubscribe?.();\n      threadReceivedMessageUnsubscribe?.();\n      threadReceivedKeystrokesUnsubscribe?.();\n      threadTypingStartedUnsubscribe?.();\n      threadTypingStoppedUnsubscribe?.();\n    };\n\n    const channelUnsubscribe = this.stompX.listenToTopic({\n      topic: request.channel._topics.self,\n      onSuccess: () => {\n        const messagesUnsubscribe = this.stompX.listenToTopic({\n          topic: request.channel._topics.messages,\n        });\n\n        const keystrokesUnsubscribe = this.stompX.listenToTopic({\n          topic: request.channel._topics.keystrokes,\n        });\n\n        const typingUnsubscribe = this.stompX.listenToTopic({\n          topic: request.channel._topics.typing,\n        });\n\n        const participantsUnsubscribe = this.stompX.listenToTopic({\n          topic: request.channel._topics.participants,\n        });\n\n        const readReceiptsUnsubscribe = this.stompX.listenToTopic({\n          topic: request.channel._topics.readReceipts,\n        });\n\n        const reactionsUnsubscribe = this.stompX.listenToTopic({\n          topic: request.channel._topics.reactions,\n        });\n\n        const eventsUnsubscribe = this.stompX.listenToTopic({\n          topic: request.channel._topics.events,\n        });\n\n        const superEnd = end;\n\n        end = () => {\n          superEnd();\n\n          eventsUnsubscribe?.();\n          reactionsUnsubscribe?.();\n          readReceiptsUnsubscribe?.();\n          participantsUnsubscribe?.();\n          typingUnsubscribe?.();\n          keystrokesUnsubscribe?.();\n          messagesUnsubscribe?.();\n\n          channelUnsubscribe();\n\n          this.chatSessions.delete(request.channel.id);\n        };\n      },\n    });\n\n    let activeThread: Thread | null = null;\n\n    const session = {\n      channel: request.channel,\n      thread: activeThread,\n      end: () => end(),\n      setThread: (thread: Thread) => {\n        threadReceivedMessageUnsubscribe?.();\n        threadReceivedKeystrokesUnsubscribe?.();\n        threadTypingStartedUnsubscribe?.();\n        threadTypingStoppedUnsubscribe?.();\n\n        if (onThreadReceivedMessage) {\n          threadReceivedMessageUnsubscribe =\n            this.stompX.listenForEvent<Message>({\n              topic: thread._topics.messages,\n              event: 'thread.message.created',\n              onSuccess: (message) => {\n                onThreadReceivedMessage(\n                  thread,\n                  this.messageMapper.map(message)\n                );\n              },\n            });\n        }\n\n        if (onThreadReceivedKeystrokes) {\n          threadReceivedKeystrokesUnsubscribe =\n            this.stompX.listenForEvent<Keystrokes>({\n              topic: thread._topics.keystrokes,\n              event: 'thread.keystrokes.created',\n              onSuccess: (keystrokes) => {\n                onThreadReceivedKeystrokes(thread, keystrokes);\n              },\n            });\n        }\n\n        if (onThreadTypingStarted) {\n          threadTypingStartedUnsubscribe = this.stompX.listenForEvent<User>({\n            topic: thread._topics.typing,\n            event: 'thread.typing.started',\n            onSuccess: (user) => {\n              onThreadTypingStarted(thread, user);\n            },\n          });\n        }\n\n        if (onThreadTypingStopped) {\n          threadTypingStoppedUnsubscribe = this.stompX.listenForEvent<User>({\n            topic: thread._topics.typing,\n            event: 'thread.typing.stopped',\n            onSuccess: (user) => {\n              onThreadTypingStopped(thread, user);\n            },\n          });\n        }\n\n        activeThread = thread;\n      },\n    };\n\n    this.chatSessions.set(request.channel.id, session);\n\n    return new StartedChatSessionResult(session);\n  }\n\n  public sendMessage(request: SendMessageRequest): Promise<SendMessageResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      let destination = '';\n      let stream = '';\n\n      const sendChannelMessageRequest = request as SendChannelMessageRequest;\n\n      if (sendChannelMessageRequest.channel !== undefined) {\n        destination = sendChannelMessageRequest.channel._actions.message;\n        stream = sendChannelMessageRequest.channel._streams.messages;\n      }\n\n      const sendMessageReplyRequest = request as SendMessageReplyRequest;\n\n      if (sendMessageReplyRequest.message !== undefined) {\n        destination = sendMessageReplyRequest.message._actions.reply;\n        stream = sendMessageReplyRequest.message._streams.replies;\n      }\n\n      const sendThreadMessageRequest = request as SendThreadMessageRequest;\n\n      if (sendThreadMessageRequest.thread !== undefined) {\n        destination = sendThreadMessageRequest.thread._actions.message;\n        stream = sendThreadMessageRequest.thread._streams.messages;\n      }\n\n      if (isSendChannelTextMessageRequest(request)) {\n        this.stompX.sendAction<TextUserMessage>({\n          destination: destination,\n          body: {\n            type: 'TEXT',\n            body: request.body,\n            groupTag: request.groupTag,\n            properties: request.properties,\n          },\n          onSuccess: (message) => {\n            resolve(new SentTextMessageResult(this.messageMapper.map(message)));\n          },\n          onError: (error) => {\n            resolve(new ChatKittyFailedResult(error));\n          },\n        });\n      }\n\n      if (isSendChannelFileMessageRequest(request)) {\n        const file = request.file;\n\n        if (isCreateChatKittyExternalFileProperties(file)) {\n          this.stompX.sendAction<FileUserMessage>({\n            destination: destination,\n            body: {\n              type: 'FILE',\n              file: file,\n              groupTag: request.groupTag,\n              properties: request.properties,\n            },\n            onSuccess: (message) => {\n              resolve(\n                new SentFileMessageResult(this.messageMapper.map(message))\n              );\n            },\n            onError: (error) => {\n              resolve(new ChatKittyFailedResult(error));\n            },\n          });\n        } else {\n          const properties: Map<string, unknown> = new Map();\n\n          if (request.groupTag) {\n            properties.set('groupTag', request.groupTag);\n          }\n\n          if (request.properties) {\n            properties.set('properties', request.properties);\n          }\n\n          this.stompX.sendToStream<FileUserMessage>({\n            stream: stream,\n            grant: <string>this.writeFileGrant,\n            blob: file as Blob,\n            properties: properties,\n            onSuccess: (message) => {\n              resolve(\n                new SentFileMessageResult(this.messageMapper.map(message))\n              );\n            },\n            onError: (error) => {\n              resolve(new ChatKittyFailedResult(error));\n            },\n            progressListener: {\n              onStarted: () => request.progressListener?.onStarted?.(),\n              onProgress: (progress) =>\n                request.progressListener?.onProgress(progress),\n              onCompleted: () =>\n                request.progressListener?.onCompleted(\n                  ChatKittyUploadResult.COMPLETED\n                ),\n              onFailed: () =>\n                request.progressListener?.onCompleted(\n                  ChatKittyUploadResult.FAILED\n                ),\n              onCancelled: () =>\n                request.progressListener?.onCompleted(\n                  ChatKittyUploadResult.CANCELLED\n                ),\n            },\n          });\n        }\n      }\n    });\n  }\n\n  public getMessages(request: GetMessagesRequest): Promise<GetMessagesResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    let relay = '';\n\n    let parameters: Record<string, unknown> | undefined;\n\n    if (isGetChannelMessagesRequest(request)) {\n      relay = request.channel._relays.messages;\n\n      parameters = {\n        ...request.filter,\n      };\n    }\n\n    if (isGetMessageRepliesRequest(request)) {\n      relay = request.message._relays.replies;\n    }\n\n    return new Promise((resolve) => {\n      ChatKittyPaginator.createInstance<Message>({\n        stompX: this.stompX,\n        relay: relay,\n        parameters: parameters,\n        contentName: 'messages',\n        mapper: (message) => this.messageMapper.map(message),\n      })\n        .then((paginator) => resolve(new GetMessagesSucceededResult(paginator)))\n        .catch((error) => resolve(new ChatKittyFailedResult(error)));\n    });\n  }\n\n  public getUnreadMessagesCount(\n    request?: GetUnreadMessagesCountRequest\n  ): Promise<GetCountResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    let relay = currentUser._relays.unreadMessagesCount;\n\n    if (isGetUnreadMessagesCountRequest(request)) {\n      relay = request.channel._relays.messagesCount;\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.relayResource<{ count: number }>({\n        destination: relay,\n        parameters: {\n          unread: true,\n        },\n        onSuccess: (resource) => {\n          resolve(new GetCountSucceedResult(resource.count));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public triggerEvent(\n    request: TriggerEventRequest\n  ): Promise<TriggerEventResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<never>({\n        destination: request.channel._actions.triggerEvent,\n        body: {\n          type: request.type,\n          properties: request.properties,\n        },\n        onSent: () => {\n          resolve(new TriggeredEventResult(request.channel));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public readMessage(request: ReadMessageRequest): Promise<ReadMessageResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<never>({\n        destination: request.message._actions.read,\n        body: {},\n        onSent: () => resolve(new ReadMessageSucceededResult(request.message)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public getLastReadMessage(\n    request: GetLastReadMessageRequest\n  ): Promise<GetLastReadMessageResult> {\n    return new Promise((resolve) => {\n      this.stompX.relayResource<Message>({\n        destination: request.channel._relays.lastReadMessage,\n        parameters: {\n          username: request.username,\n        },\n        onSuccess: (resource) => {\n          resolve(new GetLastReadMessageResult(resource));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public editMessage(request: EditMessageRequest): Promise<EditMessageResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Message>({\n        destination: request.message._actions.edit,\n        body: {\n          body: request.body,\n        },\n        onSuccess: (message) =>\n          resolve(new EditedMessageSucceededResult(message)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public getMessageRepliesCount(\n    request: GetMessageRepliesCountRequest\n  ): Promise<GetCountResult> {\n    return new Promise((resolve) => {\n      this.stompX.relayResource<{ count: number }>({\n        destination: request.message._relays.repliesCount,\n        onSuccess: (resource) => {\n          resolve(new GetCountSucceedResult(resource.count));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public getMessageChannel(\n    request: GetMessageChannelRequest\n  ): Promise<GetMessageChannelResult> {\n    return new Promise((resolve) => {\n      this.stompX.relayResource<Channel>({\n        destination: request.message._relays.channel,\n        onSuccess: (resource) => {\n          resolve(new GetMessageChannelSucceededResult(resource));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public getMessageParent(\n    request: GetMessageParentRequest\n  ): Promise<GetMessageParentResult> {\n    return new Promise((resolve) => {\n      const destination = request.message._relays.parent;\n\n      if (!destination) {\n        throw new MessageNotAReplyError(request.message);\n      }\n\n      this.stompX.relayResource<Message>({\n        destination,\n        onSuccess: (resource) => {\n          resolve(new GetMessageParentSucceededResult(resource));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public createThread(\n    request: CreateThreadRequest\n  ): Promise<CreateThreadResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Thread>({\n        destination: request.channel._actions.createThread,\n        body: { name: request.name, properties: request.properties },\n        onSuccess: (thread) => resolve(new CreatedThreadResult(thread)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public getThreads(request: GetThreadsRequest): Promise<GetThreadsResult> {\n    const parameters: { includeMainThread?: false; standalone?: true } = {};\n\n    if (request.filter?.includeMainThread === false) {\n      parameters.includeMainThread = false;\n    }\n\n    if (request.filter?.standalone === true) {\n      parameters.standalone = true;\n    }\n\n    return new Promise((resolve) => {\n      ChatKittyPaginator.createInstance<Thread>({\n        stompX: this.stompX,\n        relay: request.channel._relays.threads,\n        contentName: 'threads',\n        parameters,\n      })\n        .then((paginator) => resolve(new GetThreadsSucceededResult(paginator)))\n        .catch((error) => resolve(new ChatKittyFailedResult(error)));\n    });\n  }\n\n  public getThreadChannel(\n    request: GetThreadChannelRequest\n  ): Promise<GetThreadChannelResult> {\n    return new Promise((resolve) => {\n      this.stompX.relayResource<Channel>({\n        destination: request.thread._relays.channel,\n        onSuccess: (resource) => {\n          resolve(new GetThreadChannelSucceededResult(resource));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public getThreadMessage(\n    request: GetThreadMessageRequest\n  ): Promise<GetThreadMessageResult> {\n    return new Promise((resolve) => {\n      this.stompX.relayResource<Message>({\n        destination: request.thread._relays.message,\n        onSuccess: (resource) => {\n          resolve(new GetThreadMessageSucceededResult(resource));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public readThread(request: ReadThreadRequest): Promise<ReadThreadResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<never>({\n        destination: request.thread._actions.read,\n        body: {},\n        onSent: () => resolve(new ReadThreadSucceededResult(request.thread)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public reactToMessage(\n    request: ReactToMessageRequest\n  ): Promise<ReactToMessageResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Reaction>({\n        destination: request.message._actions.react,\n        body: { emoji: request.emoji },\n        onSuccess: (reaction) => resolve(new ReactedToMessageResult(reaction)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public getReactions(\n    request: GetReactionsRequest\n  ): Promise<GetReactionsResult> {\n    return new Promise((resolve) => {\n      ChatKittyPaginator.createInstance<Reaction>({\n        stompX: this.stompX,\n        relay: request.message._relays.reactions,\n        contentName: 'reactions',\n      })\n        .then((paginator) =>\n          resolve(new GetReactionsSucceededResult(paginator))\n        )\n        .catch((error) => resolve(new ChatKittyFailedResult(error)));\n    });\n  }\n\n  public removeReaction(\n    request: RemoveReactionRequest\n  ): Promise<RemoveReactionResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Reaction>({\n        destination: request.message._actions.removeReaction,\n        body: {\n          emoji: request.emoji,\n        },\n        onSuccess: (reaction) => resolve(new RemovedReactionResult(reaction)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public deleteMessageForMe(\n    request: DeleteMessageForMeRequest\n  ): Promise<DeleteMessageForMeResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Message>({\n        destination: request.message._actions.deleteForMe,\n        body: {},\n        onSuccess: (resource) =>\n          resolve(new DeleteMessageForMeSucceededResult(resource)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public deleteMessage(\n    request: DeleteMessageRequest\n  ): Promise<DeleteMessageResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Message>({\n        destination: request.message._actions.delete,\n        body: {},\n        onSuccess: (resource) =>\n          resolve(new DeleteMessageSucceededResult(resource)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public sendKeystrokes(request: SendKeystrokesRequest) {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    this.keyStrokesSubject.next(request);\n  }\n\n  public onNotificationReceived(\n    onNextOrObserver:\n      | ChatKittyObserver<Notification>\n      | ((notification: Notification) => void)\n  ): ChatKittyUnsubscribe {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const unsubscribe = this.stompX.listenForEvent<Notification>({\n      topic: currentUser._topics.notifications,\n      event: 'user.notification.created',\n      onSuccess: (notification) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(notification);\n        } else {\n          onNextOrObserver.onNext(notification);\n        }\n      },\n    });\n\n    return () => unsubscribe;\n  }\n\n  public onChannelJoined(\n    onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)\n  ): ChatKittyUnsubscribe {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const unsubscribe = this.stompX.listenForEvent<Channel>({\n      topic: currentUser._topics.channels,\n      event: 'user.channel.joined',\n      onSuccess: (channel) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(channel);\n        } else {\n          onNextOrObserver.onNext(channel);\n        }\n      },\n    });\n\n    return () => unsubscribe;\n  }\n\n  public onChannelHidden(\n    onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)\n  ): ChatKittyUnsubscribe {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const unsubscribe = this.stompX.listenForEvent<Channel>({\n      topic: currentUser._topics.channels,\n      event: 'user.channel.hidden',\n      onSuccess: (channel) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(channel);\n        } else {\n          onNextOrObserver.onNext(channel);\n        }\n      },\n    });\n\n    return () => unsubscribe;\n  }\n\n  public onChannelUnhidden(\n    onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)\n  ): ChatKittyUnsubscribe {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const unsubscribe = this.stompX.listenForEvent<Channel>({\n      topic: currentUser._topics.channels,\n      event: 'user.channel.unhidden',\n      onSuccess: (channel) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(channel);\n        } else {\n          onNextOrObserver.onNext(channel);\n        }\n      },\n    });\n\n    return () => unsubscribe;\n  }\n\n  public onChannelLeft(\n    onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)\n  ): ChatKittyUnsubscribe {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const unsubscribe = this.stompX.listenForEvent<Channel>({\n      topic: currentUser._topics.channels,\n      event: 'user.channel.left',\n      onSuccess: (channel) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(channel);\n        } else {\n          onNextOrObserver.onNext(channel);\n        }\n      },\n    });\n\n    return () => unsubscribe;\n  }\n\n  public onChannelUpdated(\n    onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)\n  ): ChatKittyUnsubscribe {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const unsubscribe = this.stompX.listenForEvent<Channel>({\n      topic: currentUser._topics.channels,\n      event: 'user.channel.updated',\n      onSuccess: (channel) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(channel);\n        } else {\n          onNextOrObserver.onNext(channel);\n        }\n      },\n    });\n\n    return () => unsubscribe;\n  }\n\n  public getChannelMembers(\n    request: GetChannelMembersRequest\n  ): Promise<GetUsersResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      ChatKittyPaginator.createInstance<User>({\n        stompX: this.stompX,\n        relay: request.channel._relays.members,\n        contentName: 'users',\n        parameters: {\n          ...request.filter,\n        },\n      })\n        .then((paginator) => resolve(new GetUsersSucceededResult(paginator)))\n        .catch((error) => resolve(new ChatKittyFailedResult(error)));\n    });\n  }\n\n  public getReadReceipts(\n    request: GetReadReceiptsRequest\n  ): Promise<GetReadReceiptsResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      ChatKittyPaginator.createInstance<ReadReceipt>({\n        stompX: this.stompX,\n        relay: request.message._relays.readReceipts,\n        contentName: 'receipts',\n      })\n        .then((paginator) =>\n          resolve(new GetReadReceiptsSucceededResult(paginator))\n        )\n        .catch((error) => resolve(new ChatKittyFailedResult(error)));\n    });\n  }\n\n  public getUsers(request?: GetUsersRequest): Promise<GetUsersResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      let parameters: Record<string, unknown> | undefined;\n\n      if (isGetUsersRequest(request)) {\n        parameters = {\n          ...request.filter,\n        };\n      }\n\n      ChatKittyPaginator.createInstance<User>({\n        stompX: this.stompX,\n        relay: currentUser._relays.contacts,\n        contentName: 'users',\n        parameters: parameters,\n      })\n        .then((paginator) => resolve(new GetUsersSucceededResult(paginator)))\n        .catch((error) => resolve(new ChatKittyFailedResult(error)));\n    });\n  }\n\n  public getUsersCount(request?: GetUsersRequest): Promise<GetCountResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      let parameters: Record<string, unknown> | undefined;\n\n      if (isGetUsersRequest(request)) {\n        parameters = {\n          ...request.filter,\n        };\n      }\n\n      this.stompX.relayResource<{ count: number }>({\n        destination: currentUser._relays.contactsCount,\n        parameters: parameters,\n        onSuccess: (resource) => {\n          resolve(new GetCountSucceedResult(resource.count));\n        },\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public onUserPresenceChanged(\n    onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)\n  ): ChatKittyUnsubscribe {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const unsubscribe = this.stompX.listenForEvent<User>({\n      topic: currentUser._topics.contacts,\n      event: 'contact.presence.changed',\n      onSuccess: (user) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(user);\n        } else {\n          onNextOrObserver.onNext(user);\n        }\n      },\n    });\n\n    return () => unsubscribe;\n  }\n\n  public inviteUser(request: InviteUserRequest): Promise<InviteUserResult> {\n    const destination = request.channel._actions.invite;\n\n    if (!destination) {\n      throw new ChannelNotInvitableError(request.channel);\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<User>({\n        destination: destination,\n        body: {\n          user: request.user,\n        },\n        onSuccess: (resource) => {\n          resolve(new InvitedUserResult(resource));\n        },\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public onParticipantStartedTyping(\n    onNextOrObserver: ChatKittyObserver<User> | ((participant: User) => void)\n  ): ChatKittyUnsubscribe {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const unsubscribe = this.stompX.listenForEvent<User>({\n      topic: currentUser._topics.participants,\n      event: 'participant.typing.started',\n      onSuccess: (participant) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(participant);\n        } else {\n          onNextOrObserver.onNext(participant);\n        }\n      },\n    });\n\n    return () => unsubscribe;\n  }\n\n  public onParticipantStoppedTyping(\n    onNextOrObserver: ChatKittyObserver<User> | ((participant: User) => void)\n  ): ChatKittyUnsubscribe {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const unsubscribe = this.stompX.listenForEvent<User>({\n      topic: currentUser._topics.participants,\n      event: 'participant.typing.stopped',\n      onSuccess: (participant) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(participant);\n        } else {\n          onNextOrObserver.onNext(participant);\n        }\n      },\n    });\n\n    return () => unsubscribe;\n  }\n\n  public getUser(param: number): Promise<GetUserResult> {\n    return new Promise((resolve) => {\n      this.stompX.relayResource<User>({\n        destination: ChatKitty.userRelay(param),\n        onSuccess: (user) => {\n          resolve(new GetUserSucceededResult(user));\n        },\n      });\n    });\n  }\n\n  public getUserIsChannelMember(\n    request: GetUserIsChannelMemberRequest\n  ): Promise<GetUserIsChannelMemberResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.relayResource<{ exists: boolean }>({\n        destination: request.user._relays.channelMember,\n        parameters: {\n          channelId: request.channel.id,\n        },\n        onSuccess: (resource) => {\n          resolve(new GetUserIsChannelMemberSucceededResult(resource.exists));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public blockUser(request: BlockUserRequest): Promise<BlockUserResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<User>({\n        destination: `/application/v1/users/${request.user.id}.block`,\n        body: {},\n        onSuccess: (resource) => {\n          resolve(new BlockUserSucceededResult(resource));\n        },\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public getUserBlockList(): Promise<GetUserBlockListResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      ChatKittyPaginator.createInstance<UserBlockListItem>({\n        stompX: this.stompX,\n        relay: currentUser._relays.userBlockListItems,\n        contentName: 'items',\n      })\n        .then((paginator) =>\n          resolve(new GetUserBlockListSucceededResult(paginator))\n        )\n        .catch((error) => resolve(new ChatKittyFailedResult(error)));\n    });\n  }\n\n  public deleteUserBlockListItem(\n    request: DeleteUserBlockListItemRequest\n  ): Promise<DeleteUserBlockListItemResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<User>({\n        destination: request.item._actions.delete,\n        body: {},\n        onSuccess: (resource) =>\n          resolve(new DeleteUserBlockListItemSucceededResult(resource)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n}\n\nexport declare class ChatKittyConfiguration {\n  apiKey: string;\n  isSecure?: boolean;\n  host?: string;\n}\n\nclass MessageMapper {\n  readonly readFileGrant: string;\n\n  constructor(grant: string) {\n    this.readFileGrant = grant;\n  }\n\n  public map<M extends Message>(message: M): M {\n    if (isFileMessage(message)) {\n      return {\n        ...message,\n        file: {\n          ...message.file,\n          url: message.file.url + `?grant=${this.readFileGrant}`,\n        },\n      };\n    } else {\n      return {\n        ...message,\n      };\n    }\n  }\n}\n\nfunction isGetChannelsRequest(\n  param: GetChannelsRequest | undefined\n): param is GetChannelsRequest {\n  const request = param as GetChannelsRequest;\n\n  return request?.filter !== undefined;\n}\n\nfunction isGetUsersRequest(\n  param: GetUsersRequest | undefined\n): param is GetUsersRequest {\n  const request = param as GetUsersRequest;\n\n  return request?.filter !== undefined;\n}\n\nfunction isGetChannelsUnreadRequest(\n  param: GetUnreadChannelsRequest | undefined\n): param is GetUnreadChannelsRequest {\n  const request = param as GetUnreadChannelsRequest;\n\n  return request?.filter !== undefined;\n}\n\nfunction isGetUnreadMessagesCountRequest(\n  param: GetUnreadMessagesCountRequest | undefined\n): param is GetUnreadMessagesCountRequest {\n  const request = param as GetUnreadMessagesCountRequest;\n\n  return request?.channel !== undefined;\n}\n\nfunction isSendChannelTextMessageRequest(\n  request: SendMessageRequest\n): request is SendTextMessageRequest {\n  return (request as SendTextMessageRequest).body !== undefined;\n}\n\nfunction isSendChannelFileMessageRequest(\n  request: SendMessageRequest\n): request is SendFileMessageRequest {\n  return (request as SendFileMessageRequest).file !== undefined;\n}\n\nfunction isGetChannelMessagesRequest(\n  request: GetMessagesRequest\n): request is GetChannelMessagesRequest {\n  return (request as GetChannelMessagesRequest).channel !== undefined;\n}\n\nfunction isGetMessageRepliesRequest(\n  request: GetMessagesRequest\n): request is GetMessageRepliesRequest {\n  return (request as GetMessageRepliesRequest).message !== undefined;\n}\n\nfunction isCreateChatKittyExternalFileProperties(\n  result: CreateChatKittyFileProperties\n): result is CreateChatKittyExternalFileProperties {\n  return (result as CreateChatKittyExternalFileProperties).url !== undefined;\n}\n\ninterface Calls {\n  localStream: MediaStream | null;\n\n  currentCall: Call | null;\n\n  isMuted: boolean;\n\n  isCameraOn: boolean;\n\n  initialize(configuration: {\n    media: { audio: boolean; video: boolean };\n  }): Promise<void>;\n\n  startCall(request: StartCallRequest): Promise<StartCallResult>;\n\n  acceptCall(request: AcceptCallRequest): Promise<AcceptCallResult>;\n\n  declineCall(request: DeclineCallRequest): Promise<DeclineCallResult>;\n\n  leaveCall(): void;\n\n  switchCamera(): void;\n\n  toggleMute(): void;\n\n  toggleCamera(): void;\n\n  getCalls(request: GetCallsRequest): Promise<GetCallsResult>;\n\n  getCall(id: number): Promise<GetCallResult>;\n\n  getCurrentCallParticipants(): Promise<GetUsersResult>;\n\n  getUserMediaSettings(\n    request: GetUserMediaSettingsRequest\n  ): Promise<GetUserMediaSettingsResult>;\n\n  onCallInvite(\n    onNextOrObserver: ChatKittyObserver<Call> | ((call: Call) => void)\n  ): ChatKittyUnsubscribe;\n\n  onCallActive(\n    onNextOrObserver: ChatKittyObserver<Call> | ((call: Call) => void)\n  ): ChatKittyUnsubscribe;\n\n  onParticipantAcceptedCall(\n    onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)\n  ): ChatKittyUnsubscribe;\n\n  onParticipantDeclinedCall(\n    onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)\n  ): ChatKittyUnsubscribe;\n\n  onParticipantActive(\n    onNextOrObserver:\n      | ChatKittyObserver<{ user: User; stream: MediaStream }>\n      | ((user: User, stream: MediaStream) => void)\n  ): ChatKittyUnsubscribe;\n\n  onParticipantMediaSettingsUpdated(\n    onNextOrObserver:\n      | ChatKittyObserver<UserMediaSettings>\n      | ((settings: UserMediaSettings) => void)\n  ): ChatKittyUnsubscribe;\n\n  onParticipantLeftCall(\n    onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)\n  ): ChatKittyUnsubscribe;\n\n  onCallEnded(\n    onNextOrObserver: ChatKittyObserver<Call> | ((call: Call) => void)\n  ): ChatKittyUnsubscribe;\n\n  close(): void;\n}\n\ninterface Connection {\n  createOffer(): Promise<void>;\n\n  answerOffer(description: RTCSessionDescriptionType): Promise<void>;\n\n  addCandidate(candidate: RTCIceCandidateType): Promise<void>;\n\n  close(): void;\n}\n\nclass P2PConnection implements Connection {\n  private static readonly rtcConfiguration: RTCPeerConnectionConfiguration = {\n    iceServers: [\n      {\n        username: 'participant',\n        credential: 'chatkittyturn0',\n        urls: ['turn:3.215.180.233:3478'],\n      },\n    ],\n  };\n\n  private readonly offerAnswerOptions: RTCOfferOptions;\n\n  private rtcPeerConnection: RTCPeerConnection;\n\n  constructor(\n    private readonly peer: User,\n    private readonly stream: MediaStream,\n    private readonly signalDispatcher: CallSignalDispatcher,\n    private readonly onParticipantActive?: (\n      user: User,\n      stream: MediaStream\n    ) => void\n  ) {\n    this.offerAnswerOptions = {\n      offerToReceiveAudio: true,\n      offerToReceiveVideo: true,\n    };\n\n    this.rtcPeerConnection = new RTCPeerConnection(\n      P2PConnection.rtcConfiguration\n    );\n\n    this.rtcPeerConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        signalDispatcher.dispatch({\n          type: 'ADD_CANDIDATE',\n          peer: { id: peer.id },\n          payload: event.candidate,\n        });\n      }\n    };\n\n    this.rtcPeerConnection.onaddstream = (event) => {\n      this.onParticipantActive?.(peer, event.stream);\n    };\n\n    this.rtcPeerConnection.onconnectionstatechange = () => {\n      switch (this.rtcPeerConnection.connectionState) {\n        case 'connected':\n          break;\n        case 'disconnected':\n        case 'failed':\n        case 'closed':\n          // TODO end call session\n          break;\n      }\n    };\n\n    this.rtcPeerConnection.oniceconnectionstatechange = () => {\n      switch (this.rtcPeerConnection.connectionState) {\n        case 'disconnected':\n        case 'failed':\n        case 'closed':\n          // TODO end call session\n          break;\n      }\n    };\n\n    this.rtcPeerConnection.addStream(this.stream);\n  }\n\n  createOffer = async () => {\n    const description = await this.rtcPeerConnection.createOffer(\n      this.offerAnswerOptions\n    );\n\n    await this.rtcPeerConnection.setLocalDescription(description);\n\n    this.signalDispatcher.dispatch({\n      type: 'SEND_DESCRIPTION',\n      peer: this.peer,\n      payload: description,\n    });\n  };\n\n  answerOffer = async (description: RTCSessionDescriptionType) => {\n    await this.rtcPeerConnection.setRemoteDescription(description);\n\n    if (description.type === 'offer') {\n      const answer = await this.rtcPeerConnection.createAnswer(\n        this.offerAnswerOptions\n      );\n\n      await this.rtcPeerConnection.setLocalDescription(answer);\n\n      this.signalDispatcher.dispatch({\n        type: 'SEND_DESCRIPTION',\n        peer: this.peer,\n        payload: answer,\n      });\n    }\n  };\n\n  addCandidate = async (candidate: RTCIceCandidateType): Promise<void> => {\n    await this.rtcPeerConnection.addIceCandidate(candidate);\n  };\n\n  close = (): void => {\n    this.rtcPeerConnection.close();\n  };\n}\n\nclass CallSignalDispatcher {\n  constructor(private stompX: StompX, private call: Call) {}\n\n  dispatch = (request: CreateCallSignalRequest): void => {\n    this.stompX.sendAction<never>({\n      destination: this.call._actions.signal,\n      body: request,\n    });\n  };\n}\n\nexport default ChatKitty;\n"]}