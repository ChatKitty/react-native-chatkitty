{"version":3,"sources":["stompx.ts"],"names":["TransportFallback","then","sockjs","catch","error","ErrorMessageTransportFallback","errorMessage","message","default","constructor","Error","StompX","configuration","Map","RxStomp","host","isSecure","wsScheme","httpScheme","rxStompConfig","stompVersions","Versions","connectionTimeout","heartbeatIncoming","heartbeatOutgoing","forceBinaryWSFrames","appendMissingNULLonIncoming","debug","isDebug","console","log","axios","Axios","create","baseURL","connect","request","headers","username","version","authParams","JSON","stringify","WebSocket","brokerURL","encodeURIComponent","apiKey","webSocketFactory","rxStomp","configure","connectHeaders","activate","connected$","subscribe","relayResource","destination","onSuccess","user","initialized","onConnected","watch","id","generateSubscriptionId","parse","body","subscription","receipt","handler","pendingRelayErrors","get","delete","pendingActionErrors","forEach","clear","write","read","grant","connectionState$","state","RxStompState","CLOSED","onConnectionLost","OPEN","onConnectionResumed","stompErrors$","frame","e","timestamp","Date","toISOString","onResult","onError","disconnect","webSocketErrors$","guardConnected","subscriptionId","set","stompClient","resource","parameters","listenToTopic","unsubscribe","subscriptionReceipt","generateReceipt","watchForReceipt","topic","ack","event","action","pendingActions","types","find","type","handlers","eventHandlers","topics","listenForEvent","undefined","Set","add","sendAction","onSent","events","publish","sendToStream","data","FormData","append","blob","properties","value","key","progressListener","onStarted","method","url","stream","onUploadProgress","progressEvent","onProgress","loaded","total","response","onCompleted","onFailed","deactivate","pipe"],"mappings":"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","sourcesContent":["import { RxStomp, RxStompConfig, RxStompState } from '@stomp/rx-stomp';\nimport { StompHeaders, Versions } from '@stomp/stompjs';\nimport Axios, { AxiosInstance } from 'axios';\nimport { Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { v4 } from 'uuid';\nimport { encode } from 'base-64';\n\nimport { version } from './environment/version';\n\nlet TransportFallback: { default: { new (arg: string): unknown } };\n\nimport('sockjs-client')\n  .then((sockjs) => {\n    TransportFallback = sockjs;\n  })\n  .catch((error) => {\n    ErrorMessageTransportFallback.errorMessage = error.message;\n\n    TransportFallback = { default: ErrorMessageTransportFallback };\n  });\n\nclass ErrorMessageTransportFallback {\n  static errorMessage: string;\n\n  constructor() {\n    throw new Error(\n      'Encountered error when attempting to use transport fallback: ' +\n        ErrorMessageTransportFallback.errorMessage\n    );\n  }\n}\n\nexport default class StompX {\n  private readonly host: string;\n\n  private readonly wsScheme: string;\n\n  private readonly httpScheme: string;\n\n  private readonly rxStompConfig: RxStompConfig;\n\n  private readonly axios: AxiosInstance;\n\n  private readonly topics: Map<string, Subscription> = new Map();\n\n  private readonly pendingActions: Map<\n    string,\n    {\n      types?: string[];\n      action: (resource: unknown) => void;\n    }\n  > = new Map();\n\n  private readonly pendingRelayErrors: Map<\n    string,\n    (error: StompXError) => void\n  > = new Map();\n\n  private readonly pendingActionErrors: Map<\n    string,\n    (error: StompXError) => void\n  > = new Map();\n\n  private readonly eventHandlers: Map<\n    string,\n    Set<StompXEventHandler<unknown>>\n  > = new Map();\n\n  private rxStomp: RxStomp = new RxStomp();\n\n  public initialized = false;\n\n  constructor(configuration: StompXConfiguration) {\n    this.host = configuration.host;\n\n    if (configuration.isSecure) {\n      this.wsScheme = 'wss';\n      this.httpScheme = 'https';\n    } else {\n      this.wsScheme = 'ws';\n      this.httpScheme = 'http';\n    }\n\n    this.rxStompConfig = {\n      stompVersions: new Versions(['1.2']),\n      connectionTimeout: 60000,\n      heartbeatIncoming: 10000,\n      heartbeatOutgoing: 60000,\n      forceBinaryWSFrames: true,\n      appendMissingNULLonIncoming: true,\n\n      debug: (message) => {\n        if (configuration.isDebug) {\n          console.log('StompX Debug:\\n' + message);\n        }\n      },\n    };\n\n    this.axios = Axios.create({\n      baseURL: this.httpScheme + '://' + this.host,\n    });\n  }\n\n  public connect<U>(request: StompXConnectRequest<U>) {\n    const host = this.host;\n\n    const headers: StompHeaders = {\n      'StompX-User': request.username,\n      'StompX-User-Agent': `ChatKitty-RN/${version}`,\n    };\n\n    if (request.authParams) {\n      headers['StompX-Auth-Params'] = encode(\n        JSON.stringify(request.authParams)\n      );\n    }\n\n    if (typeof WebSocket === 'function') {\n      this.rxStompConfig.brokerURL = `${\n        this.wsScheme\n      }://${host}/rtm/websocket?api-key=${encodeURIComponent(request.apiKey)}`;\n    } else {\n      this.rxStompConfig.webSocketFactory = () => {\n        return new TransportFallback.default(\n          `${this.httpScheme}://${host}/rtm?api-key=${encodeURIComponent(\n            request.apiKey\n          )}`\n        );\n      };\n    }\n\n    this.rxStomp.configure({\n      ...this.rxStompConfig,\n      connectHeaders: headers,\n    });\n\n    this.rxStomp.activate();\n\n    this.rxStomp.connected$.subscribe(() => {\n      this.relayResource<U>({\n        destination: '/application/v1/user.relay',\n        onSuccess: (user) => {\n          if (this.initialized) {\n            request.onConnected(user);\n          } else {\n            this.rxStomp\n              .watch('/user/queue/v1/errors', {\n                id: StompX.generateSubscriptionId(),\n              })\n              .subscribe((message) => {\n                const error: StompXError = JSON.parse(message.body);\n\n                const subscription = message.headers['subscription-id'];\n                const receipt = message.headers['receipt-id'];\n\n                if (subscription) {\n                  const handler = this.pendingRelayErrors.get(subscription);\n\n                  if (handler) {\n                    handler(error);\n\n                    this.pendingRelayErrors.delete(subscription);\n                  }\n                }\n\n                if (receipt) {\n                  const handler = this.pendingActionErrors.get(receipt);\n\n                  if (handler) {\n                    handler(error);\n\n                    this.pendingActionErrors.delete(receipt);\n                  }\n                }\n\n                if (!subscription && !receipt) {\n                  this.pendingActionErrors.forEach((handler) => {\n                    handler(error);\n                  });\n\n                  this.pendingActionErrors.clear();\n                }\n              });\n\n            this.relayResource<{ grant: string }>({\n              destination: '/application/v1/user.write_file_access_grant.relay',\n              onSuccess: (write) => {\n                this.relayResource<{ grant: string }>({\n                  destination:\n                    '/application/v1/user.read_file_access_grant.relay',\n                  onSuccess: (read) => {\n                    request.onSuccess(user, write.grant, read.grant);\n\n                    request.onConnected(user);\n\n                    this.initialized = true;\n                  },\n                });\n              },\n            });\n          }\n        },\n      });\n    });\n\n    this.rxStomp.connectionState$.subscribe((state) => {\n      if (state === RxStompState.CLOSED) {\n        request.onConnectionLost();\n      }\n\n      if (state === RxStompState.OPEN) {\n        request.onConnectionResumed();\n      }\n    });\n\n    this.rxStomp.stompErrors$.subscribe((frame) => {\n      let error: StompXError;\n\n      try {\n        error = JSON.parse(frame.body);\n      } catch (e) {\n        error = {\n          error: 'UnknownChatKittyError',\n          message: 'An unknown error occurred.',\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      if (error.error === 'AccessDeniedError') {\n        const onResult = () => request.onError(error);\n\n        this.disconnect({ onSuccess: onResult, onError: onResult });\n      } else {\n        request.onError(error);\n      }\n    });\n\n    this.rxStomp.webSocketErrors$.subscribe(() => {\n      request.onError({\n        error: 'ChatKittyConnectionError',\n        message: 'Could not connect to ChatKitty',\n        timestamp: new Date().toISOString(),\n      });\n    });\n  }\n\n  public relayResource<R>(request: StompXRelayResourceRequest<R>) {\n    this.guardConnected(() => {\n      const subscriptionId = StompX.generateSubscriptionId();\n\n      if (request.onError) {\n        this.pendingRelayErrors.set(subscriptionId, request.onError);\n      }\n\n      this.rxStomp.stompClient.subscribe(\n        request.destination,\n        (message) => {\n          request.onSuccess(JSON.parse(message.body).resource);\n        },\n        {\n          ...request.parameters,\n          id: subscriptionId,\n        }\n      );\n    });\n  }\n\n  public listenToTopic(request: StompXListenToTopicRequest): () => void {\n    let unsubscribe = () => {\n      // Do nothing\n    };\n\n    this.guardConnected(() => {\n      const subscriptionReceipt = StompX.generateReceipt();\n\n      const onSuccess = request.onSuccess;\n\n      if (onSuccess) {\n        this.rxStomp.watchForReceipt(subscriptionReceipt, () => {\n          onSuccess();\n        });\n      }\n\n      const subscription = this.rxStomp\n        .watch(request.topic, {\n          id: StompX.generateSubscriptionId(),\n          receipt: subscriptionReceipt,\n          ack: 'client-individual',\n        })\n        .subscribe((message) => {\n          const event: StompXEvent<unknown> = JSON.parse(message.body);\n\n          const receipt = message.headers['receipt-id'];\n\n          if (receipt) {\n            const action = this.pendingActions.get(receipt);\n\n            if (\n              action &&\n              (!action.types ||\n                action.types.find((type) => type === event.type))\n            ) {\n              action.action(event.resource);\n\n              this.pendingActions.delete(receipt);\n            }\n          }\n\n          const handlers = this.eventHandlers.get(request.topic);\n\n          if (handlers) {\n            handlers.forEach((handler) => {\n              if (handler.event === event.type) {\n                handler.onSuccess(event.resource);\n              }\n            });\n          }\n\n          message.ack();\n        });\n\n      this.topics.set(request.topic, subscription);\n\n      unsubscribe = () => {\n        subscription.unsubscribe();\n\n        this.topics.delete(request.topic);\n      };\n    });\n\n    return () => unsubscribe();\n  }\n\n  public listenForEvent<R>(\n    request: StompXListenForEventRequest<R>\n  ): () => void {\n    let handlers = this.eventHandlers.get(request.topic);\n\n    if (handlers === undefined) {\n      handlers = new Set<StompXEventHandler<unknown>>();\n    }\n\n    const handler = {\n      event: request.event,\n      onSuccess: request.onSuccess as (resource: unknown) => void,\n    };\n\n    handlers.add(handler);\n\n    this.eventHandlers.set(request.topic, handlers);\n\n    return () => {\n      if (handlers) {\n        handlers.delete(handler);\n      }\n    };\n  }\n\n  public sendAction<R>(request: StompXSendActionRequest<R>) {\n    this.guardConnected(() => {\n      const receipt = StompX.generateReceipt();\n\n      if (request.onSent) {\n        this.rxStomp.watchForReceipt(receipt, request.onSent);\n      }\n\n      if (request.onSuccess) {\n        this.pendingActions.set(receipt, {\n          types: request.events,\n          action: request.onSuccess as (resource: unknown) => void,\n        });\n      }\n\n      if (request.onError) {\n        this.pendingActionErrors.set(receipt, request.onError);\n      }\n\n      this.rxStomp.publish({\n        destination: request.destination,\n        headers: {\n          'content-type': 'application/json;charset=UTF-8',\n          'receipt': receipt,\n        },\n        body: JSON.stringify(request.body),\n      });\n    });\n  }\n\n  public sendToStream<R>(request: StompXSendToStreamRequest<R>) {\n    const data = new FormData();\n\n    data.append('file', request.blob);\n\n    request.properties?.forEach((value, key) => {\n      data.append(key, JSON.stringify(value));\n    });\n\n    request.progressListener?.onStarted?.();\n\n    this.axios({\n      method: 'post',\n      url: request.stream,\n      data: data,\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        'Grant': request.grant,\n      },\n      onUploadProgress: (progressEvent) => {\n        request.progressListener?.onProgress?.(\n          progressEvent.loaded / progressEvent.total\n        );\n      },\n    })\n      .then((response) => {\n        request.progressListener?.onCompleted?.();\n\n        request.onSuccess?.(response.data);\n      })\n      .catch((error) => {\n        request.progressListener?.onFailed?.();\n\n        request.onError?.(error);\n      });\n  }\n\n  public disconnect(request: StompXDisconnectRequest) {\n    this.initialized = false;\n\n    this.rxStomp.deactivate().then(request.onSuccess).catch(request.onError);\n\n    this.rxStomp = new RxStomp();\n  }\n\n  private guardConnected(action: () => void) {\n    this.rxStomp.connected$.pipe(take(1)).subscribe(() => {\n      action();\n    });\n  }\n\n  private static generateSubscriptionId(): string {\n    return 'subscription-id-' + v4();\n  }\n\n  private static generateReceipt(): string {\n    return 'receipt-' + v4();\n  }\n}\n\nexport declare class StompXConfiguration {\n  public isSecure: boolean;\n  public host: string;\n  public isDebug: boolean;\n}\n\nexport declare class StompXConnectRequest<U> {\n  apiKey: string;\n  username: string;\n  authParams?: unknown;\n  onSuccess: (user: U, writeFileGrant: string, readFileGrant: string) => void;\n  onConnected: (user: U) => void;\n  onConnectionLost: () => void;\n  onConnectionResumed: () => void;\n  onError: (error: StompXError) => void;\n}\n\nexport declare class StompXDisconnectRequest {\n  onSuccess: () => void;\n  onError: (e: unknown) => void;\n}\n\nexport declare class StompXListenForEventRequest<R> {\n  topic: string;\n  event: string;\n  onSuccess: (resource: R) => void;\n}\n\nexport declare class StompXListenToTopicRequest {\n  topic: string;\n  onSuccess?: () => void;\n}\n\nexport declare class StompXPage {\n  _embedded?: Record<string, unknown>;\n  page: StompXPageMetadata;\n  _relays: StompXPageRelays;\n}\n\nexport declare class StompXPageMetadata {\n  size: number;\n  totalElement: number;\n  totalPages: number;\n  number: number;\n}\n\nexport declare class StompXPageRelays {\n  first?: string;\n  prev?: string;\n  self: string;\n  next?: string;\n  last?: string;\n}\n\nexport declare class StompXRelayParameters {\n  [key: string]: unknown;\n}\n\nexport declare class StompXSendActionRequest<R> {\n  destination: string;\n  body: unknown;\n  events?: string[];\n  onSent?: () => void;\n  onSuccess?: (resource: R) => void;\n  onError?: (error: StompXError) => void;\n}\n\nexport declare class StompXRelayResourceRequest<R> {\n  destination: string;\n  parameters?: StompXRelayParameters;\n  onSuccess: (resource: R) => void;\n  onError?: (error: StompXError) => void;\n}\n\nexport declare class StompXSendToStreamRequest<R> {\n  stream: string;\n  grant: string;\n  blob: Blob;\n  properties?: Map<string, unknown>;\n  onSuccess?: (resource: R) => void;\n  onError?: (error: StompXError) => void;\n  progressListener?: StompXUploadProgressListener;\n}\n\nexport declare class StompXEvent<R> {\n  type: string;\n  version: string;\n  resource: R;\n}\n\nexport declare class StompXError {\n  error: string;\n  message: string;\n  timestamp: string;\n}\n\nexport declare class StompXEventHandler<R> {\n  event: string;\n  onSuccess: (resource: R) => void;\n}\n\nexport interface StompXUploadProgressListener {\n  onStarted?: () => void;\n  onProgress?: (progress: number) => void;\n  onCompleted?: () => void;\n  onFailed?: () => void;\n  onCancelled?: () => void;\n}\n"]}