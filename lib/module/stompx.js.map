{"version":3,"sources":["stompx.ts"],"names":["RxStomp","RxStompState","Versions","Axios","take","v4","encode","version","TransportFallback","then","sockjs","catch","error","ErrorMessageTransportFallback","errorMessage","message","default","constructor","Error","StompX","configuration","Map","host","isSecure","wsScheme","httpScheme","rxStompConfig","stompVersions","connectionTimeout","heartbeatIncoming","heartbeatOutgoing","forceBinaryWSFrames","appendMissingNULLonIncoming","debug","isDebug","console","log","axios","create","baseURL","connect","request","headers","username","authParams","JSON","stringify","WebSocket","brokerURL","encodeURIComponent","apiKey","webSocketFactory","rxStomp","configure","connectHeaders","activate","connected$","subscribe","relayResource","destination","onSuccess","user","initialized","onConnected","watch","id","generateSubscriptionId","parse","body","subscription","receipt","handler","pendingRelayErrors","get","delete","pendingActionErrors","forEach","clear","write","read","grant","connectionState$","state","CLOSED","onConnectionLost","OPEN","onConnectionResumed","stompErrors$","frame","e","timestamp","Date","toISOString","onResult","onError","disconnect","webSocketErrors$","guardConnected","subscriptionId","set","stompClient","resource","parameters","listenToTopic","unsubscribe","subscriptionReceipt","generateReceipt","watchForReceipt","topic","ack","event","action","pendingActions","types","find","type","handlers","eventHandlers","topics","listenForEvent","undefined","Set","add","sendAction","onSent","events","publish","sendToStream","data","FormData","append","blob","properties","value","key","progressListener","onStarted","method","url","stream","onUploadProgress","progressEvent","onProgress","loaded","total","response","onCompleted","onFailed","deactivate","pipe"],"mappings":"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","sourcesContent":["import { RxStomp, RxStompConfig, RxStompState } from '@stomp/rx-stomp';\nimport { StompHeaders, Versions } from '@stomp/stompjs';\nimport Axios, { AxiosInstance } from 'axios';\nimport { Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { v4 } from 'uuid';\nimport { encode } from 'base-64';\n\nimport { version } from './environment/version';\n\nlet TransportFallback: { default: { new (arg: string): unknown } };\n\nimport('sockjs-client')\n  .then((sockjs) => {\n    TransportFallback = sockjs;\n  })\n  .catch((error) => {\n    ErrorMessageTransportFallback.errorMessage = error.message;\n\n    TransportFallback = { default: ErrorMessageTransportFallback };\n  });\n\nclass ErrorMessageTransportFallback {\n  static errorMessage: string;\n\n  constructor() {\n    throw new Error(\n      'Encountered error when attempting to use transport fallback: ' +\n        ErrorMessageTransportFallback.errorMessage\n    );\n  }\n}\n\nexport default class StompX {\n  private readonly host: string;\n\n  private readonly wsScheme: string;\n\n  private readonly httpScheme: string;\n\n  private readonly rxStompConfig: RxStompConfig;\n\n  private readonly axios: AxiosInstance;\n\n  private readonly topics: Map<string, Subscription> = new Map();\n\n  private readonly pendingActions: Map<\n    string,\n    {\n      types?: string[];\n      action: (resource: unknown) => void;\n    }\n  > = new Map();\n\n  private readonly pendingRelayErrors: Map<\n    string,\n    (error: StompXError) => void\n  > = new Map();\n\n  private readonly pendingActionErrors: Map<\n    string,\n    (error: StompXError) => void\n  > = new Map();\n\n  private readonly eventHandlers: Map<\n    string,\n    Set<StompXEventHandler<unknown>>\n  > = new Map();\n\n  private rxStomp: RxStomp = new RxStomp();\n\n  public initialized = false;\n\n  constructor(configuration: StompXConfiguration) {\n    this.host = configuration.host;\n\n    if (configuration.isSecure) {\n      this.wsScheme = 'wss';\n      this.httpScheme = 'https';\n    } else {\n      this.wsScheme = 'ws';\n      this.httpScheme = 'http';\n    }\n\n    this.rxStompConfig = {\n      stompVersions: new Versions(['1.2']),\n      connectionTimeout: 60000,\n      heartbeatIncoming: 10000,\n      heartbeatOutgoing: 60000,\n      forceBinaryWSFrames: true,\n      appendMissingNULLonIncoming: true,\n\n      debug: (message) => {\n        if (configuration.isDebug) {\n          console.log('StompX Debug:\\n' + message);\n        }\n      },\n    };\n\n    this.axios = Axios.create({\n      baseURL: this.httpScheme + '://' + this.host,\n    });\n  }\n\n  public connect<U>(request: StompXConnectRequest<U>) {\n    const host = this.host;\n\n    const headers: StompHeaders = {\n      'StompX-User': request.username,\n      'StompX-User-Agent': `ChatKitty-RN/${version}`,\n    };\n\n    if (request.authParams) {\n      headers['StompX-Auth-Params'] = encode(\n        JSON.stringify(request.authParams)\n      );\n    }\n\n    if (typeof WebSocket === 'function') {\n      this.rxStompConfig.brokerURL = `${\n        this.wsScheme\n      }://${host}/rtm/websocket?api-key=${encodeURIComponent(request.apiKey)}`;\n    } else {\n      this.rxStompConfig.webSocketFactory = () => {\n        return new TransportFallback.default(\n          `${this.httpScheme}://${host}/rtm?api-key=${encodeURIComponent(\n            request.apiKey\n          )}`\n        );\n      };\n    }\n\n    this.rxStomp.configure({\n      ...this.rxStompConfig,\n      connectHeaders: headers,\n    });\n\n    this.rxStomp.activate();\n\n    this.rxStomp.connected$.subscribe(() => {\n      this.relayResource<U>({\n        destination: '/application/v1/user.relay',\n        onSuccess: (user) => {\n          if (this.initialized) {\n            request.onConnected(user);\n          } else {\n            this.rxStomp\n              .watch('/user/queue/v1/errors', {\n                id: StompX.generateSubscriptionId(),\n              })\n              .subscribe((message) => {\n                const error: StompXError = JSON.parse(message.body);\n\n                const subscription = message.headers['subscription-id'];\n                const receipt = message.headers['receipt-id'];\n\n                if (subscription) {\n                  const handler = this.pendingRelayErrors.get(subscription);\n\n                  if (handler) {\n                    handler(error);\n\n                    this.pendingRelayErrors.delete(subscription);\n                  }\n                }\n\n                if (receipt) {\n                  const handler = this.pendingActionErrors.get(receipt);\n\n                  if (handler) {\n                    handler(error);\n\n                    this.pendingActionErrors.delete(receipt);\n                  }\n                }\n\n                if (!subscription && !receipt) {\n                  this.pendingActionErrors.forEach((handler) => {\n                    handler(error);\n                  });\n\n                  this.pendingActionErrors.clear();\n                }\n              });\n\n            this.relayResource<{ grant: string }>({\n              destination: '/application/v1/user.write_file_access_grant.relay',\n              onSuccess: (write) => {\n                this.relayResource<{ grant: string }>({\n                  destination:\n                    '/application/v1/user.read_file_access_grant.relay',\n                  onSuccess: (read) => {\n                    request.onSuccess(user, write.grant, read.grant);\n\n                    request.onConnected(user);\n\n                    this.initialized = true;\n                  },\n                });\n              },\n            });\n          }\n        },\n      });\n    });\n\n    this.rxStomp.connectionState$.subscribe((state) => {\n      if (state === RxStompState.CLOSED) {\n        request.onConnectionLost();\n      }\n\n      if (state === RxStompState.OPEN) {\n        request.onConnectionResumed();\n      }\n    });\n\n    this.rxStomp.stompErrors$.subscribe((frame) => {\n      let error: StompXError;\n\n      try {\n        error = JSON.parse(frame.body);\n      } catch (e) {\n        error = {\n          error: 'UnknownChatKittyError',\n          message: 'An unknown error occurred.',\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      if (error.error === 'AccessDeniedError') {\n        const onResult = () => request.onError(error);\n\n        this.disconnect({ onSuccess: onResult, onError: onResult });\n      } else {\n        request.onError(error);\n      }\n    });\n\n    this.rxStomp.webSocketErrors$.subscribe(() => {\n      request.onError({\n        error: 'ChatKittyConnectionError',\n        message: 'Could not connect to ChatKitty',\n        timestamp: new Date().toISOString(),\n      });\n    });\n  }\n\n  public relayResource<R>(request: StompXRelayResourceRequest<R>) {\n    this.guardConnected(() => {\n      const subscriptionId = StompX.generateSubscriptionId();\n\n      if (request.onError) {\n        this.pendingRelayErrors.set(subscriptionId, request.onError);\n      }\n\n      this.rxStomp.stompClient.subscribe(\n        request.destination,\n        (message) => {\n          request.onSuccess(JSON.parse(message.body).resource);\n        },\n        {\n          ...request.parameters,\n          id: subscriptionId,\n        }\n      );\n    });\n  }\n\n  public listenToTopic(request: StompXListenToTopicRequest): () => void {\n    let unsubscribe = () => {\n      // Do nothing\n    };\n\n    this.guardConnected(() => {\n      const subscriptionReceipt = StompX.generateReceipt();\n\n      const onSuccess = request.onSuccess;\n\n      if (onSuccess) {\n        this.rxStomp.watchForReceipt(subscriptionReceipt, () => {\n          onSuccess();\n        });\n      }\n\n      const subscription = this.rxStomp\n        .watch(request.topic, {\n          id: StompX.generateSubscriptionId(),\n          receipt: subscriptionReceipt,\n          ack: 'client-individual',\n        })\n        .subscribe((message) => {\n          const event: StompXEvent<unknown> = JSON.parse(message.body);\n\n          const receipt = message.headers['receipt-id'];\n\n          if (receipt) {\n            const action = this.pendingActions.get(receipt);\n\n            if (\n              action &&\n              (!action.types ||\n                action.types.find((type) => type === event.type))\n            ) {\n              action.action(event.resource);\n\n              this.pendingActions.delete(receipt);\n            }\n          }\n\n          const handlers = this.eventHandlers.get(request.topic);\n\n          if (handlers) {\n            handlers.forEach((handler) => {\n              if (handler.event === event.type) {\n                handler.onSuccess(event.resource);\n              }\n            });\n          }\n\n          message.ack();\n        });\n\n      this.topics.set(request.topic, subscription);\n\n      unsubscribe = () => {\n        subscription.unsubscribe();\n\n        this.topics.delete(request.topic);\n      };\n    });\n\n    return () => unsubscribe();\n  }\n\n  public listenForEvent<R>(\n    request: StompXListenForEventRequest<R>\n  ): () => void {\n    let handlers = this.eventHandlers.get(request.topic);\n\n    if (handlers === undefined) {\n      handlers = new Set<StompXEventHandler<unknown>>();\n    }\n\n    const handler = {\n      event: request.event,\n      onSuccess: request.onSuccess as (resource: unknown) => void,\n    };\n\n    handlers.add(handler);\n\n    this.eventHandlers.set(request.topic, handlers);\n\n    return () => {\n      if (handlers) {\n        handlers.delete(handler);\n      }\n    };\n  }\n\n  public sendAction<R>(request: StompXSendActionRequest<R>) {\n    this.guardConnected(() => {\n      const receipt = StompX.generateReceipt();\n\n      if (request.onSent) {\n        this.rxStomp.watchForReceipt(receipt, request.onSent);\n      }\n\n      if (request.onSuccess) {\n        this.pendingActions.set(receipt, {\n          types: request.events,\n          action: request.onSuccess as (resource: unknown) => void,\n        });\n      }\n\n      if (request.onError) {\n        this.pendingActionErrors.set(receipt, request.onError);\n      }\n\n      this.rxStomp.publish({\n        destination: request.destination,\n        headers: {\n          'content-type': 'application/json;charset=UTF-8',\n          'receipt': receipt,\n        },\n        body: JSON.stringify(request.body),\n      });\n    });\n  }\n\n  public sendToStream<R>(request: StompXSendToStreamRequest<R>) {\n    const data = new FormData();\n\n    data.append('file', request.blob);\n\n    request.properties?.forEach((value, key) => {\n      data.append(key, JSON.stringify(value));\n    });\n\n    request.progressListener?.onStarted?.();\n\n    this.axios({\n      method: 'post',\n      url: request.stream,\n      data: data,\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        'Grant': request.grant,\n      },\n      onUploadProgress: (progressEvent) => {\n        request.progressListener?.onProgress?.(\n          progressEvent.loaded / progressEvent.total\n        );\n      },\n    })\n      .then((response) => {\n        request.progressListener?.onCompleted?.();\n\n        request.onSuccess?.(response.data);\n      })\n      .catch((error) => {\n        request.progressListener?.onFailed?.();\n\n        request.onError?.(error);\n      });\n  }\n\n  public disconnect(request: StompXDisconnectRequest) {\n    this.initialized = false;\n\n    this.rxStomp.deactivate().then(request.onSuccess).catch(request.onError);\n\n    this.rxStomp = new RxStomp();\n  }\n\n  private guardConnected(action: () => void) {\n    this.rxStomp.connected$.pipe(take(1)).subscribe(() => {\n      action();\n    });\n  }\n\n  private static generateSubscriptionId(): string {\n    return 'subscription-id-' + v4();\n  }\n\n  private static generateReceipt(): string {\n    return 'receipt-' + v4();\n  }\n}\n\nexport declare class StompXConfiguration {\n  public isSecure: boolean;\n  public host: string;\n  public isDebug: boolean;\n}\n\nexport declare class StompXConnectRequest<U> {\n  apiKey: string;\n  username: string;\n  authParams?: unknown;\n  onSuccess: (user: U, writeFileGrant: string, readFileGrant: string) => void;\n  onConnected: (user: U) => void;\n  onConnectionLost: () => void;\n  onConnectionResumed: () => void;\n  onError: (error: StompXError) => void;\n}\n\nexport declare class StompXDisconnectRequest {\n  onSuccess: () => void;\n  onError: (e: unknown) => void;\n}\n\nexport declare class StompXListenForEventRequest<R> {\n  topic: string;\n  event: string;\n  onSuccess: (resource: R) => void;\n}\n\nexport declare class StompXListenToTopicRequest {\n  topic: string;\n  onSuccess?: () => void;\n}\n\nexport declare class StompXPage {\n  _embedded?: Record<string, unknown>;\n  page: StompXPageMetadata;\n  _relays: StompXPageRelays;\n}\n\nexport declare class StompXPageMetadata {\n  size: number;\n  totalElement: number;\n  totalPages: number;\n  number: number;\n}\n\nexport declare class StompXPageRelays {\n  first?: string;\n  prev?: string;\n  self: string;\n  next?: string;\n  last?: string;\n}\n\nexport declare class StompXRelayParameters {\n  [key: string]: unknown;\n}\n\nexport declare class StompXSendActionRequest<R> {\n  destination: string;\n  body: unknown;\n  events?: string[];\n  onSent?: () => void;\n  onSuccess?: (resource: R) => void;\n  onError?: (error: StompXError) => void;\n}\n\nexport declare class StompXRelayResourceRequest<R> {\n  destination: string;\n  parameters?: StompXRelayParameters;\n  onSuccess: (resource: R) => void;\n  onError?: (error: StompXError) => void;\n}\n\nexport declare class StompXSendToStreamRequest<R> {\n  stream: string;\n  grant: string;\n  blob: Blob;\n  properties?: Map<string, unknown>;\n  onSuccess?: (resource: R) => void;\n  onError?: (error: StompXError) => void;\n  progressListener?: StompXUploadProgressListener;\n}\n\nexport declare class StompXEvent<R> {\n  type: string;\n  version: string;\n  resource: R;\n}\n\nexport declare class StompXError {\n  error: string;\n  message: string;\n  timestamp: string;\n}\n\nexport declare class StompXEventHandler<R> {\n  event: string;\n  onSuccess: (resource: R) => void;\n}\n\nexport interface StompXUploadProgressListener {\n  onStarted?: () => void;\n  onProgress?: (progress: number) => void;\n  onCompleted?: () => void;\n  onFailed?: () => void;\n  onCancelled?: () => void;\n}\n"]}