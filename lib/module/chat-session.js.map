{"version":3,"sources":["chat-session.ts"],"names":["ChatKittySucceededResult","StartedChatSessionResult","constructor","session"],"mappings":"AAOA,SAA0BA,wBAA1B,QAA0D,UAA1D;AAqCA,OAAO,MAAMC,wBAAN,SAAuCD,wBAAvC,CAAgE;AACrEE,EAAAA,WAAW,CAAQC,OAAR,EAA8B;AACvC;AADuC,SAAtBA,OAAsB,GAAtBA,OAAsB;AAExC;;AAHoE","sourcesContent":["import { Channel } from './channel';\nimport { Event } from './event';\nimport { Keystrokes } from './keystrokes';\nimport { Message } from './message';\nimport { ChatKittyUnsubscribe } from './observer';\nimport { Reaction } from './reaction';\nimport { ReadReceipt } from './read-receipt';\nimport { ChatKittyResult, ChatKittySucceededResult } from './result';\nimport { Thread } from './thread';\nimport { User } from './user';\n\nexport declare class ChatSession {\n  channel: Channel;\n  thread: Thread | null;\n  end: ChatKittyUnsubscribe;\n\n  public setThread(thread: Thread): void;\n}\n\nexport type StartChatSessionResult =\n  | ChatKittyResult<StartedChatSessionResult>\n  | StartedChatSessionResult;\n\nexport declare class StartChatSessionRequest {\n  channel: Channel;\n  onReceivedMessage?: (message: Message, parent?: Message) => void;\n  onReceivedKeystrokes?: (keystrokes: Keystrokes) => void;\n  onTypingStarted?: (user: User) => void;\n  onTypingStopped?: (user: User) => void;\n  onParticipantEnteredChat?: (user: User) => void;\n  onParticipantLeftChat?: (user: User) => void;\n  onParticipantPresenceChanged?: (user: User) => void;\n  onEventTriggered?: (event: Event) => void;\n  onMessageUpdated?: (message: Message) => void;\n  onChannelUpdated?: (channel: Channel) => void;\n  onMessageRead?: (message: Message, receipt: ReadReceipt) => void;\n  onMessageReactionAdded?: (message: Message, reaction: Reaction) => void;\n  onMessageReactionRemoved?: (message: Message, reaction: Reaction) => void;\n  onThreadReceivedMessage?: (thread: Thread, message: Message) => void;\n  onThreadReceivedKeystrokes?: (thread: Thread, keystrokes: Keystrokes) => void;\n  onThreadTypingStarted?: (thread: Thread, user: User) => void;\n  onThreadTypingStopped?: (thread: Thread, user: User) => void;\n}\n\nexport class StartedChatSessionResult extends ChatKittySucceededResult {\n  constructor(public session: ChatSession) {\n    super();\n  }\n}\n"]}