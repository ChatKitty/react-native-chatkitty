{"version":3,"sources":["message.ts"],"names":["ChatKittyError","ChatKittySucceededResult","isTextMessage","message","body","undefined","isFileMessage","file","isUserMessage","user","isSystemMessage","GetMessagesSucceededResult","constructor","paginator","GetLastReadMessageResult","ReadMessageSucceededResult","EditedMessageSucceededResult","DeleteMessageForMeSucceededResult","DeleteMessageSucceededResult","SentTextMessageResult","SentFileMessageResult","sentTextMessage","result","type","sentFileMessage","GetMessageChannelSucceededResult","channel","GetMessageParentSucceededResult","MessageNotAReplyError","messageModel","id"],"mappings":"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","sourcesContent":["import { Channel } from './channel';\nimport { ChatKittyError } from './error';\nimport {\n  ChatKittyFile,\n  ChatKittyUploadProgressListener,\n  CreateChatKittyFileProperties,\n} from './file';\nimport { ChatKittyPaginator } from './pagination';\nimport { ReactionSummary } from './reaction';\nimport {\n  ChatKittyFailedResult,\n  ChatKittyResult,\n  ChatKittySucceededResult\n} from './result';\nimport { Thread } from './thread';\nimport { User } from './user';\n\nexport type Message = SystemMessage | UserMessage;\n\nexport type SystemMessage = TextSystemMessage | FileSystemMessage;\n\nexport type UserMessage = TextUserMessage | FileUserMessage;\n\nexport type TextMessage = TextSystemMessage | TextUserMessage;\n\nexport type FileMessage = FileSystemMessage | FileUserMessage;\n\nexport interface BaseMessage {\n  id: number;\n  type: string;\n  channelId: number;\n  createdTime: string;\n  groupTag?: string;\n  reactionsSummary?: ReactionSummary;\n  repliesCount?: number;\n  properties: unknown;\n  _relays: MessageRelays;\n  _actions: MessageActions;\n  _streams: MessageStreams;\n}\n\nexport type BaseTextMessage = BaseMessage & {\n  body: string;\n  links: MessageLink[];\n  mentions?: MessageMention[];\n};\n\nexport type BaseFileMessage = BaseMessage & {\n  file: ChatKittyFile;\n};\n\nexport type BaseUserMessage = BaseMessage & {\n  user: User;\n};\n\nexport type TextSystemMessage = BaseTextMessage;\n\nexport type FileSystemMessage = BaseFileMessage;\n\nexport type TextUserMessage = BaseTextMessage & BaseUserMessage;\n\nexport type FileUserMessage = BaseFileMessage & BaseUserMessage;\n\nexport declare class MessageLink {\n  source: string;\n  startPosition: number;\n  endPosition: number;\n  preview?: MessageLinkPreview;\n}\n\nexport declare class MessageLinkPreview {\n  url: string;\n  title: string;\n  image: MessageLinkPreviewImage;\n  description?: string;\n  siteName?: string;\n}\n\nexport declare class MessageLinkPreviewImage {\n  source: string;\n}\n\nexport type MessageMention = ChannelMessageMention | UserMessageMention;\n\nexport interface BaseMessageMention {\n  type: string;\n  tag: string;\n  startPosition: number;\n  endPosition: number;\n}\n\nexport type ChannelMessageMention = BaseMessageMention & {\n  channel: Channel;\n};\n\nexport type UserMessageMention = BaseMessageMention & {\n  user: User;\n};\n\nexport declare class MessageRelays {\n  self: string;\n  channel: string;\n  parent?: string;\n  readReceipts: string;\n  repliesCount: string;\n  replies: string;\n  reactions: string;\n}\n\nexport declare class MessageActions {\n  read: string;\n  reply: string;\n  deleteForMe: string;\n  delete: string;\n  react: string;\n  edit: string;\n  removeReaction: string;\n}\n\nexport declare class MessageStreams {\n  replies: string;\n}\n\nexport function isTextMessage(message: Message): message is TextMessage {\n  return (message as TextMessage).body !== undefined;\n}\n\nexport function isFileMessage(message: Message): message is FileMessage {\n  return (message as FileMessage).file !== undefined;\n}\n\nexport function isUserMessage(message: Message): message is UserMessage {\n  return (message as UserMessage).user !== undefined;\n}\n\nexport function isSystemMessage(message: Message): message is SystemMessage {\n  return (message as UserMessage).user === undefined;\n}\n\nexport type GetMessagesRequest =\n  | GetChannelMessagesRequest\n  | GetMessageRepliesRequest;\n\nexport declare class GetChannelMessagesRequest {\n  channel: Channel;\n  filter?: GetChannelMessagesFilter;\n}\n\nexport declare class GetMessageRepliesRequest {\n  message: Message;\n}\n\nexport declare class GetChannelMessagesFilter {\n  mainThread: boolean;\n}\n\nexport declare class GetLastReadMessageRequest {\n  channel: Channel;\n  username: string;\n}\n\nexport type GetMessagesResult =\n  | ChatKittyResult<GetMessagesSucceededResult>\n  | GetMessagesSucceededResult\n  | ChatKittyFailedResult;\n\nexport class GetMessagesSucceededResult extends ChatKittySucceededResult {\n  constructor(public paginator: ChatKittyPaginator<Message>) {\n    super();\n  }\n}\n\nexport class GetLastReadMessageResult extends ChatKittySucceededResult {\n  constructor(public message?: Message) {\n    super();\n  }\n}\n\nexport declare class ReadMessageRequest {\n  message: Message;\n}\n\nexport type ReadMessageResult =\n  | ChatKittyResult<ReadMessageSucceededResult>\n  | ReadMessageSucceededResult\n  | ChatKittyFailedResult;\n\nexport class ReadMessageSucceededResult extends ChatKittySucceededResult {\n  constructor(public message: Message) {\n    super();\n  }\n}\n\nexport declare class EditMessageRequest {\n  message: Message;\n  body: string;\n}\n\nexport type EditMessageResult =\n  | ChatKittyResult<EditedMessageSucceededResult>\n  | EditedMessageSucceededResult\n  | ChatKittyFailedResult;\n\nexport class EditedMessageSucceededResult extends ChatKittySucceededResult {\n  constructor(public message: Message) {\n    super();\n  }\n}\n\nexport declare class DeleteMessageForMeRequest {\n  message: Message;\n}\n\nexport type DeleteMessageForMeResult =\n  | ChatKittyResult<DeleteMessageForMeSucceededResult>\n  | DeleteMessageForMeSucceededResult\n  | ChatKittyFailedResult;\n\nexport class DeleteMessageForMeSucceededResult extends ChatKittySucceededResult {\n  constructor(public message: Message) {\n    super();\n  }\n}\n\nexport declare class DeleteMessageRequest {\n  message: Message;\n}\n\nexport type DeleteMessageResult =\n  | ChatKittyResult<DeleteMessageSucceededResult>\n  | DeleteMessageSucceededResult\n  | ChatKittyFailedResult;\n\nexport class DeleteMessageSucceededResult extends ChatKittySucceededResult {\n  constructor(public message: Message) {\n    super();\n  }\n}\n\nexport type SendMessageRequest =\n  | SendTextMessageRequest\n  | SendFileMessageRequest;\n\nexport type SendChannelMessageRequest = {\n  channel: Channel;\n};\n\nexport type SendMessageReplyRequest = {\n  message: Message;\n};\n\nexport type SendThreadMessageRequest = {\n  thread: Thread;\n};\n\nexport type SendTextMessageRequest = (\n  | SendChannelMessageRequest\n  | SendMessageReplyRequest\n  | SendThreadMessageRequest\n) & {\n  body: string;\n  groupTag?: string;\n  properties?: unknown;\n};\n\nexport type SendFileMessageRequest = (\n  | SendChannelMessageRequest\n  | SendMessageReplyRequest\n  | SendThreadMessageRequest\n) & {\n  file: CreateChatKittyFileProperties;\n  groupTag?: string;\n  properties?: unknown;\n  progressListener?: ChatKittyUploadProgressListener;\n};\n\nexport type SendMessageResult =\n  | ChatKittyResult<SentMessageResult>\n  | SentMessageResult\n  | ChatKittyFailedResult;\n\nexport type SentMessageResult =\n  | ChatKittyResult<SentTextMessageResult>\n  | SentTextMessageResult\n  | SentFileMessageResult;\n\nexport class SentTextMessageResult extends ChatKittySucceededResult {\n  constructor(public message: TextUserMessage) {\n    super();\n  }\n}\n\nexport class SentFileMessageResult extends ChatKittySucceededResult {\n  constructor(public message: FileUserMessage) {\n    super();\n  }\n}\n\nexport function sentTextMessage(\n  result: SentMessageResult\n): result is SentTextMessageResult {\n  const message = (result as SentTextMessageResult).message;\n\n  return message !== undefined && message.type === 'TEXT';\n}\n\nexport function sentFileMessage(\n  result: SentMessageResult\n): result is SentFileMessageResult {\n  const message = (result as SentFileMessageResult).message;\n\n  return message !== undefined && message.type === 'FILE';\n}\n\nexport declare class GetUnreadMessagesCountRequest {\n  channel: Channel;\n}\n\nexport declare class GetMessageRepliesCountRequest {\n  message: Message;\n}\n\nexport declare class GetMessageChannelRequest {\n  message: Message;\n}\n\nexport type GetMessageChannelResult =\n  | ChatKittyResult<GetMessageChannelSucceededResult>\n  | GetMessageChannelSucceededResult\n  | ChatKittyFailedResult;\n\nexport class GetMessageChannelSucceededResult extends ChatKittySucceededResult {\n  constructor(public channel: Channel) {\n    super();\n  }\n}\n\nexport declare class GetMessageParentRequest {\n  message: Message;\n}\n\nexport type GetMessageParentResult =\n  | ChatKittyResult<GetMessageParentSucceededResult>\n  | GetMessageParentSucceededResult\n  | ChatKittyFailedResult;\n\nexport class GetMessageParentSucceededResult extends ChatKittySucceededResult {\n  constructor(public message: Message) {\n    super();\n  }\n}\n\nexport class MessageNotAReplyError extends ChatKittyError {\n  constructor(public messageModel: Message) {\n    super(\n      'MessageNotAReplyError',\n      `Message ${messageModel.id} is not a reply.`\n    );\n  }\n}\n"]}