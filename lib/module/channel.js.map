{"version":3,"sources":["channel.ts"],"names":["ChatKittyError","ChatKittySucceededResult","isDirectChannel","channel","type","isPublicChannel","isPrivateChannel","CreatedChannelResult","constructor","GetChannelsSucceededResult","paginator","GetChannelSucceededResult","GetChannelUnreadSucceededResult","unread","JoinedChannelResult","ChannelNotPubliclyJoinableError","name","AddedChannelModeratorResult","CannotAddModeratorToChannelError","MutedChannelResult","UnmutedChannelResult","LeftChannelResult","NotAChannelMemberError","ReadChannelSucceededResult","ClearChannelHistorySucceededResult","HideChannelSucceededResult","InvitedUserResult","user","ChannelNotInvitableError","UpdatedChannelResult","DeletedChannelResult"],"mappings":"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","sourcesContent":["import { ChatKittyError } from './error';\nimport { Message } from './message';\nimport { ChatKittyPaginator } from './pagination';\nimport {\n  ChatKittyFailedResult,\n  ChatKittyResult,\n  ChatKittySucceededResult,\n} from './result';\nimport { ChatKittyUserReference, User } from './user';\n\nexport type Channel = DirectChannel | PublicChannel | PrivateChannel;\n\nexport interface BaseChannel {\n  id: number;\n  type: string;\n  name: string;\n  creator?: User;\n  lastReceivedMessage?: Message;\n  properties: unknown;\n  _relays: ChannelRelays;\n  _topics: ChannelTopics;\n  _actions: ChannelActions;\n  _streams: ChannelStreams;\n}\n\nexport type DirectChannel = BaseChannel & {\n  members: User[];\n};\n\nexport type PublicChannel = BaseChannel;\n\nexport type PrivateChannel = BaseChannel;\n\nexport declare class ChannelRelays {\n  self: string;\n  messages: string;\n  messagesCount: string;\n  lastReceivedMessage: string;\n  lastReadMessage: string;\n  unread: string;\n  members: string;\n  threads: string;\n  calls: string;\n}\n\nexport declare class ChannelTopics {\n  self: string;\n  messages: string;\n  keystrokes: string;\n  typing: string;\n  participants: string;\n  readReceipts: string;\n  reactions: string;\n  events: string;\n}\n\nexport declare class ChannelActions {\n  message: string;\n  keystrokes: string;\n  join?: string;\n  leave?: string;\n  addModerator?: string;\n  invite?: string;\n  read: string;\n  mute: string;\n  call: string;\n  triggerEvent: string;\n  update: string;\n  delete: string;\n  clearHistory: string;\n  hide: string;\n  createThread: string;\n}\n\nexport declare class ChannelStreams {\n  messages: string;\n}\n\nexport function isDirectChannel(channel: Channel): channel is DirectChannel {\n  return channel.type === 'DIRECT';\n}\n\nexport function isPublicChannel(channel: Channel): channel is PublicChannel {\n  return channel.type === 'PUBLIC';\n}\n\nexport function isPrivateChannel(channel: Channel): channel is PrivateChannel {\n  return channel.type === 'PRIVATE';\n}\n\nexport type CreateChannelResult =\n  | ChatKittyResult<CreatedChannelResult>\n  | CreatedChannelResult\n  | ChatKittyFailedResult;\n\nexport declare class CreateChannelRequest {\n  type: string;\n  name?: string;\n  members?: ChatKittyUserReference[];\n  properties?: unknown;\n}\n\nexport class CreatedChannelResult extends ChatKittySucceededResult {\n  constructor(public channel: Channel) {\n    super();\n  }\n}\n\nexport declare class GetChannelsRequest {\n  filter?: GetChannelsFilter;\n}\n\nexport declare class GetChannelsFilter {\n  name?: string;\n  joined?: boolean;\n  unread?: boolean;\n}\n\nexport declare class GetUnreadChannelsRequest {\n  filter: GetUnreadChannelsFilter;\n}\n\nexport declare class GetUnreadChannelsFilter {\n  type: string;\n}\n\nexport declare class GetChannelUnreadRequest {\n  channel: Channel;\n}\n\nexport type GetChannelsResult =\n  | ChatKittyResult<GetChannelsSucceededResult>\n  | GetChannelsSucceededResult\n  | ChatKittyFailedResult;\n\nexport class GetChannelsSucceededResult extends ChatKittySucceededResult {\n  constructor(public paginator: ChatKittyPaginator<Channel>) {\n    super();\n  }\n}\n\nexport type GetChannelResult =\n  | ChatKittyResult<GetChannelSucceededResult>\n  | GetChannelSucceededResult\n  | ChatKittyFailedResult;\n\nexport class GetChannelSucceededResult extends ChatKittySucceededResult {\n  constructor(public channel: Channel) {\n    super();\n  }\n}\n\nexport type GetChannelUnreadResult =\n  | ChatKittyResult<GetChannelUnreadSucceededResult>\n  | GetChannelUnreadSucceededResult\n  | ChatKittyFailedResult;\n\nexport class GetChannelUnreadSucceededResult extends ChatKittySucceededResult {\n  constructor(public unread: boolean) {\n    super();\n  }\n}\n\nexport declare class JoinChannelRequest {\n  channel: Channel;\n}\n\nexport type JoinChannelResult =\n  | ChatKittyResult<JoinedChannelResult>\n  | JoinedChannelResult\n  | ChatKittyFailedResult;\n\nexport class JoinedChannelResult extends ChatKittySucceededResult {\n  constructor(public channel: Channel) {\n    super();\n  }\n}\n\nexport class ChannelNotPubliclyJoinableError extends ChatKittyError {\n  constructor(public channel: Channel) {\n    super(\n      'ChannelNotPubliclyJoinableError',\n      `The channel ${channel.name} can't be joined without an invite.`\n    );\n  }\n}\n\nexport declare class GetChannelMembersRequest {\n  channel: Channel;\n  filter?: GetChannelMembersFilter;\n}\n\nexport declare class GetChannelMembersFilter {\n  displayName?: string;\n}\n\nexport declare class AddChannelModeratorRequest {\n  channel: Channel;\n  user: ChatKittyUserReference;\n}\n\nexport type AddChannelModeratorResult =\n  | ChatKittyResult<AddedChannelModeratorResult>\n  | AddedChannelModeratorResult\n  | ChatKittyFailedResult;\n\nexport class AddedChannelModeratorResult extends ChatKittySucceededResult {\n  constructor(public channel: Channel) {\n    super();\n  }\n}\n\nexport class CannotAddModeratorToChannelError extends ChatKittyError {\n  constructor(public channel: Channel) {\n    super(\n      'CannotAddModeratorToChannel',\n      `The channel ${channel.name} is not a group channel and cannot have moderators.`\n    );\n  }\n}\n\nexport declare class MuteChannelRequest {\n  channel: Channel;\n}\n\nexport type MuteChannelResult =\n  | ChatKittyResult<MutedChannelResult>\n  | MutedChannelResult\n  | ChatKittyFailedResult;\n\nexport class MutedChannelResult extends ChatKittySucceededResult {\n  constructor(public channel: Channel) {\n    super();\n  }\n}\n\nexport declare class UnmuteChannelRequest {\n  channel: Channel;\n}\n\nexport type UnmuteChannelResult =\n  | ChatKittyResult<UnmutedChannelResult>\n  | UnmutedChannelResult\n  | ChatKittyFailedResult;\n\nexport class UnmutedChannelResult extends ChatKittySucceededResult {\n  constructor(public channel: Channel) {\n    super();\n  }\n}\n\nexport declare class LeaveChannelRequest {\n  channel: Channel;\n}\n\nexport type LeaveChannelResult =\n  | ChatKittyResult<LeftChannelResult>\n  | LeftChannelResult\n  | ChatKittyFailedResult;\n\nexport class LeftChannelResult extends ChatKittySucceededResult {\n  constructor(public channel: Channel) {\n    super();\n  }\n}\n\nexport class NotAChannelMemberError extends ChatKittyError {\n  constructor(public channel: Channel) {\n    super(\n      'NotAChannelMemberError',\n      `You are not a member of channel ${channel.name}.`\n    );\n  }\n}\n\nexport declare class ReadChannelRequest {\n  channel: Channel;\n}\n\nexport type ReadChannelResult =\n  | ChatKittyResult<ReadChannelSucceededResult>\n  | ReadChannelSucceededResult\n  | ChatKittyFailedResult;\n\nexport class ReadChannelSucceededResult extends ChatKittySucceededResult {\n  constructor(public channel: Channel) {\n    super();\n  }\n}\n\nexport declare class ClearChannelHistoryRequest {\n  channel: Channel;\n}\n\nexport type ClearChannelHistoryResult =\n  | ChatKittyResult<ClearChannelHistorySucceededResult>\n  | ClearChannelHistorySucceededResult\n  | ChatKittyFailedResult;\n\nexport class ClearChannelHistorySucceededResult extends ChatKittySucceededResult {\n  constructor(public channel: Channel) {\n    super();\n  }\n}\n\nexport declare class HideChannelRequest {\n  channel: DirectChannel;\n}\n\nexport type HideChannelResult =\n  | ChatKittyResult<HideChannelSucceededResult>\n  | HideChannelSucceededResult\n  | ChatKittyFailedResult;\n\nexport class HideChannelSucceededResult extends ChatKittySucceededResult {\n  constructor(public channel: DirectChannel) {\n    super();\n  }\n}\n\nexport declare class InviteUserRequest {\n  channel: Channel;\n  user: ChatKittyUserReference;\n}\n\nexport type InviteUserResult =\n  | ChatKittyResult<InvitedUserResult>\n  | InvitedUserResult\n  | ChatKittyFailedResult;\n\nexport class InvitedUserResult extends ChatKittySucceededResult {\n  constructor(public user: User) {\n    super();\n  }\n}\n\nexport class ChannelNotInvitableError extends ChatKittyError {\n  constructor(public channel: Channel) {\n    super(\n      'ChannelNotInvitableError',\n      `The channel ${channel.name} does not accept invites.`\n    );\n  }\n}\n\nexport declare class UpdateChannelRequest {\n  channel: Channel;\n}\n\nexport type UpdateChannelResult =\n  | ChatKittyResult<UpdatedChannelResult>\n  | UpdatedChannelResult\n  | ChatKittyFailedResult;\n\nexport class UpdatedChannelResult extends ChatKittySucceededResult {\n  constructor(public channel: Channel) {\n    super();\n  }\n}\n\nexport declare class DeleteChannelRequest {\n  channel: Channel;\n}\n\nexport type DeleteChannelResult =\n  | ChatKittyResult<DeletedChannelResult>\n  | DeletedChannelResult\n  | ChatKittyFailedResult;\n\nexport class DeletedChannelResult extends ChatKittySucceededResult {\n  constructor() {\n    super();\n  }\n}\n"]}