{"version":3,"sources":["chatkitty.ts"],"names":["BehaviorSubject","Subject","mediaDevices","RTCPeerConnection","AcceptedCallResult","GetCallsSucceededResult","GetCallSucceededResult","DeclinedCallResult","StartedCallResult","NoActiveCallError","isAddCandidateCallSignal","isAnswerOfferCallSignal","isCreateOfferCallSignal","isDisconnectPeerCallSignal","isSendDescriptionCallSignal","StompX","GetCurrentUserSuccessfulResult","UpdatedCurrentUserDisplayPictureResult","UpdatedCurrentUserResult","DeleteMessageForMeSucceededResult","DeleteMessageSucceededResult","EditedMessageSucceededResult","GetLastReadMessageResult","GetMessageChannelSucceededResult","GetMessageParentSucceededResult","GetMessagesSucceededResult","isFileMessage","MessageNotAReplyError","ReadMessageSucceededResult","SentFileMessageResult","SentTextMessageResult","CreatedThreadResult","GetThreadChannelSucceededResult","GetThreadMessageSucceededResult","GetThreadsSucceededResult","ReadThreadSucceededResult","ChatKittyFailedResult","failed","GetCountSucceedResult","succeeded","BlockUserSucceededResult","GetUserIsChannelMemberSucceededResult","GetUsersSucceededResult","GetUserSucceededResult","AddedChannelModeratorResult","CannotAddModeratorToChannelError","ChannelNotInvitableError","ChannelNotPubliclyJoinableError","ClearChannelHistorySucceededResult","CreatedChannelResult","DeletedChannelResult","GetChannelsSucceededResult","GetChannelSucceededResult","GetChannelUnreadSucceededResult","HideChannelSucceededResult","InvitedUserResult","JoinedChannelResult","LeftChannelResult","MutedChannelResult","NotAChannelMemberError","ReadChannelSucceededResult","UnmutedChannelResult","UpdatedChannelResult","GetReactionsSucceededResult","ReactedToMessageResult","RemovedReactionResult","GetReadReceiptsSucceededResult","ChatKittyPaginator","DeleteUserBlockListItemSucceededResult","GetUserBlockListSucceededResult","TriggeredEventResult","StartedChatSessionResult","debounceTime","NoActiveSessionError","SessionActiveError","StartedSessionResult","ChatKittyUploadResult","environment","GetUserMediaSettingsSucceededResult","ChatKitty","getInstance","apiKey","instance","_instances","get","undefined","set","channelRelay","id","userRelay","constructor","configuration","Map","MessageMapper","ChatKittyCalls","callRelay","userMediaSettingsRelay","kitty","localStream","getVideoTracks","forEach","track","_switchCamera","getAudioTracks","enabled","isMuted","currentUser","stompX","sendAction","destination","_actions","updateMediaSettingsAudioEnabled","body","isCameraOn","updateMediaSettingsVideoEnabled","initialize","isFrontCamera","devices","enumerateDevices","facing","videoSourceId","find","device","kind","facingMode","constraints","audio","media","video","mandatory","minWidth","minHeight","minFrameRate","optional","sourceId","getUserMedia","startCall","request","Promise","resolve","type","channel","members","result","createChannel","call","properties","onSuccess","startCallSession","then","onError","error","acceptCall","declineCall","decline","leaveCall","endCallUnsubscribe","getCalls","parameters","active","filter","createInstance","relay","_relays","calls","contentName","paginator","catch","getCall","relayResource","getCurrentCallParticipants","currentCall","participants","getUserMediaSettings","user","settings","onCallInvite","onNextOrObserver","unsubscribe","listenForEvent","topic","_topics","event","onNext","onCallActive","onParticipantAcceptedCall","subscription","participantAcceptedCallSubject","subscribe","onParticipantDeclinedCall","participantDeclinedCallSubject","onParticipantActive","participantActiveSubject","stream","onParticipantMediaSettingsUpdated","participantMediaSettingsUpdatedSubject","onParticipantLeftCall","participantLeftCallSubject","onCallEnded","callEndedSubject","close","release","participantAcceptedCallUnsubscribe","participantDeclinedCallUnsubscribe","participantLeftCallUnsubscribe","userMediaSettingsUpdatedUnsubscribe","next","userMediaSettings","signalSubject","signalDispatcher","CallSignalDispatcher","receivedCallSignalUnsubscribe","signals","signal","end","signalsSubscription","connections","endedCallUnsubscribe","self","endedCall","connection","clear","activeCallUnsubscribe","c","onCreateOffer","peer","has","P2PConnection","createOffer","onAnswerOffer","onDisconnect","addCandidate","payload","answerOffer","e","console","log","callUnsubscribe","listenToTopic","participantsUnsubscribe","userMediaSettingsUnsubscribe","signalsUnsubscribe","superEnd","ready","onSent","isSecure","host","isDebug","production","keyStrokesSubject","asObservable","pipe","thread","keystrokes","keys","startSession","initialized","connect","username","authParams","writeFileGrant","readFileGrant","channels","messages","notifications","contacts","users","reactions","threads","messageMapper","onConnected","currentUserSubject","onConnectionLost","lostConnectionSubject","onConnectionResumed","resumedConnectionSubject","endSession","reject","disconnect","getCurrentUser","onCurrentUserChanged","onCurrentUserOnline","onCurrentUserOffline","updateCurrentUser","update","updateCurrentUserDisplayPicture","file","Blob","sendToStream","_streams","displayPicture","grant","blob","progressListener","onStarted","onProgress","progress","onCompleted","COMPLETED","onFailed","FAILED","onCancelled","CANCELLED","updateDisplayPicture","updateChannel","deleteChannel","delete","events","getChannels","isGetChannelsRequest","joined","joinableChannels","subscribable","unread","unreadChannels","name","getChannel","joinChannel","join","leaveChannel","leave","addChannelModerator","addModerator","getUnreadChannelsCount","isGetChannelsUnreadRequest","channelsCount","resource","count","getChannelUnread","exists","readChannel","read","muteChannel","mute","state","unmuteChannel","clearChannelHistory","clearHistory","hideChannel","hide","startChatSession","onReceivedMessage","onReceivedKeystrokes","onParticipantEnteredChat","onParticipantLeftChat","onTypingStarted","onTypingStopped","onParticipantPresenceChanged","onEventTriggered","onMessageUpdated","onChannelUpdated","onMessageRead","onMessageReactionAdded","onMessageReactionRemoved","onThreadReceivedMessage","onThreadReceivedKeystrokes","onThreadTypingStarted","onThreadTypingStopped","receivedMessageUnsubscribe","receivedKeystrokesUnsubscribe","participantEnteredChatUnsubscribe","participantLeftChatUnsubscribe","typingStartedUnsubscribe","typingStoppedUnsubscribe","participantPresenceChangedUnsubscribe","eventTriggeredUnsubscribe","messageUpdatedUnsubscribe","channelUpdatedUnsubscribe","messageReadUnsubscribe","messageReactionAddedUnsubscribe","messageReactionRemovedUnsubscribe","threadReceivedMessageUnsubscribe","threadReceivedKeystrokesUnsubscribe","threadTypingStartedUnsubscribe","threadTypingStoppedUnsubscribe","message","parent","map","typing","readReceipts","receipt","reaction","channelUnsubscribe","messagesUnsubscribe","keystrokesUnsubscribe","typingUnsubscribe","readReceiptsUnsubscribe","reactionsUnsubscribe","eventsUnsubscribe","chatSessions","activeThread","session","setThread","sendMessage","sendChannelMessageRequest","sendMessageReplyRequest","reply","replies","sendThreadMessageRequest","isSendChannelTextMessageRequest","groupTag","isSendChannelFileMessageRequest","isCreateChatKittyExternalFileProperties","getMessages","isGetChannelMessagesRequest","isGetMessageRepliesRequest","mapper","getUnreadMessagesCount","unreadMessagesCount","isGetUnreadMessagesCountRequest","messagesCount","triggerEvent","readMessage","getLastReadMessage","lastReadMessage","editMessage","edit","getMessageRepliesCount","repliesCount","getMessageChannel","getMessageParent","createThread","getThreads","includeMainThread","standalone","getThreadChannel","getThreadMessage","readThread","reactToMessage","react","emoji","getReactions","removeReaction","deleteMessageForMe","deleteForMe","deleteMessage","sendKeystrokes","onNotificationReceived","notification","onChannelJoined","onChannelHidden","onChannelUnhidden","onChannelLeft","getChannelMembers","getReadReceipts","getUsers","isGetUsersRequest","getUsersCount","contactsCount","onUserPresenceChanged","inviteUser","invite","onParticipantStartedTyping","participant","onParticipantStoppedTyping","getUser","param","getUserIsChannelMember","channelMember","channelId","blockUser","getUserBlockList","userBlockListItems","deleteUserBlockListItem","item","url","description","rtcPeerConnection","offerAnswerOptions","setLocalDescription","dispatch","setRemoteDescription","answer","createAnswer","candidate","addIceCandidate","offerToReceiveAudio","offerToReceiveVideo","rtcConfiguration","onicecandidate","onaddstream","onconnectionstatechange","connectionState","oniceconnectionstatechange","addStream","iceServers","credential","urls"],"mappings":"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","sourcesContent":["import { BehaviorSubject, Subject } from 'rxjs';\n\nimport {\n  mediaDevices,\n  MediaStream,\n  MediaStreamConstraints,\n  RTCIceCandidateType,\n  RTCOfferOptions,\n  RTCPeerConnection,\n  RTCPeerConnectionConfiguration,\n  RTCSessionDescriptionType,\n} from 'react-native-webrtc';\nimport {\n  AcceptCallRequest,\n  AcceptCallResult,\n  AcceptedCallResult,\n  Call,\n  GetCallResult,\n  GetCallsRequest,\n  GetCallsResult,\n  GetCallsSucceededResult,\n  GetCallSucceededResult,\n  DeclineCallRequest,\n  DeclineCallResult,\n  DeclinedCallResult,\n  StartCallRequest,\n  StartCallResult,\n  StartedCallResult,\n  NoActiveCallError,\n} from './call';\nimport {\n  AnswerOfferCallSignal,\n  CallSignal,\n  CreateCallSignalRequest,\n  CreateOfferCallSignal,\n  DisconnectPeerCallSignal,\n  isAddCandidateCallSignal,\n  isAnswerOfferCallSignal,\n  isCreateOfferCallSignal,\n  isDisconnectPeerCallSignal,\n  isSendDescriptionCallSignal,\n} from './call-signal';\nimport StompX from './stompx';\nimport { ChatKittyObserver, ChatKittyUnsubscribe } from './observer';\nimport {\n  CurrentUser,\n  GetCurrentUserResult,\n  GetCurrentUserSuccessfulResult,\n  UpdateCurrentUserDisplayPictureRequest,\n  UpdateCurrentUserDisplayPictureResult,\n  UpdateCurrentUserResult,\n  UpdatedCurrentUserDisplayPictureResult,\n  UpdatedCurrentUserResult,\n} from './current-user';\nimport {\n  DeleteMessageForMeRequest,\n  DeleteMessageForMeResult,\n  DeleteMessageForMeSucceededResult,\n  DeleteMessageRequest,\n  DeleteMessageResult,\n  DeleteMessageSucceededResult,\n  EditedMessageSucceededResult,\n  EditMessageRequest,\n  EditMessageResult,\n  FileUserMessage,\n  GetChannelMessagesRequest,\n  GetLastReadMessageRequest,\n  GetLastReadMessageResult,\n  GetMessageChannelRequest,\n  GetMessageChannelResult,\n  GetMessageChannelSucceededResult,\n  GetMessageParentRequest,\n  GetMessageParentResult,\n  GetMessageParentSucceededResult,\n  GetMessageRepliesCountRequest,\n  GetMessageRepliesRequest,\n  GetMessagesRequest,\n  GetMessagesResult,\n  GetMessagesSucceededResult,\n  GetUnreadMessagesCountRequest,\n  isFileMessage,\n  Message,\n  MessageNotAReplyError,\n  ReadMessageRequest,\n  ReadMessageResult,\n  ReadMessageSucceededResult,\n  SendChannelMessageRequest,\n  SendFileMessageRequest,\n  SendMessageReplyRequest,\n  SendMessageRequest,\n  SendMessageResult,\n  SendTextMessageRequest,\n  SendThreadMessageRequest,\n  SentFileMessageResult,\n  SentTextMessageResult,\n  TextUserMessage,\n} from './message';\nimport {\n  CreatedThreadResult,\n  CreateThreadRequest,\n  CreateThreadResult,\n  GetThreadChannelRequest,\n  GetThreadChannelResult,\n  GetThreadChannelSucceededResult,\n  GetThreadMessageRequest,\n  GetThreadMessageResult,\n  GetThreadMessageSucceededResult,\n  GetThreadsRequest,\n  GetThreadsResult,\n  GetThreadsSucceededResult,\n  ReadThreadRequest,\n  ReadThreadResult,\n  ReadThreadSucceededResult,\n  Thread,\n} from './thread';\nimport {\n  ChatKittyFailedResult,\n  failed,\n  GetCountResult,\n  GetCountSucceedResult,\n  succeeded,\n} from './result';\nimport {\n  BlockUserRequest,\n  BlockUserResult,\n  BlockUserSucceededResult,\n  ChatKittyUserReference,\n  GetUserIsChannelMemberRequest,\n  GetUserIsChannelMemberResult,\n  GetUserIsChannelMemberSucceededResult,\n  GetUserResult,\n  GetUsersRequest,\n  GetUsersResult,\n  GetUsersSucceededResult,\n  GetUserSucceededResult,\n  User,\n} from './user';\nimport {\n  AddChannelModeratorRequest,\n  AddChannelModeratorResult,\n  AddedChannelModeratorResult,\n  CannotAddModeratorToChannelError,\n  Channel,\n  ChannelNotInvitableError,\n  ChannelNotPubliclyJoinableError,\n  ClearChannelHistoryRequest,\n  ClearChannelHistoryResult,\n  ClearChannelHistorySucceededResult,\n  CreateChannelRequest,\n  CreateChannelResult,\n  CreatedChannelResult,\n  DeleteChannelRequest,\n  DeleteChannelResult,\n  DeletedChannelResult,\n  DirectChannel,\n  GetChannelMembersRequest,\n  GetChannelResult,\n  GetChannelsRequest,\n  GetChannelsResult,\n  GetChannelsSucceededResult,\n  GetChannelSucceededResult,\n  GetChannelUnreadRequest,\n  GetChannelUnreadResult,\n  GetChannelUnreadSucceededResult,\n  GetUnreadChannelsRequest,\n  HideChannelRequest,\n  HideChannelResult,\n  HideChannelSucceededResult,\n  InvitedUserResult,\n  InviteUserRequest,\n  InviteUserResult,\n  JoinChannelRequest,\n  JoinChannelResult,\n  JoinedChannelResult,\n  LeaveChannelRequest,\n  LeaveChannelResult,\n  LeftChannelResult,\n  MuteChannelRequest,\n  MuteChannelResult,\n  MutedChannelResult,\n  NotAChannelMemberError,\n  ReadChannelRequest,\n  ReadChannelResult,\n  ReadChannelSucceededResult,\n  UnmuteChannelRequest,\n  UnmuteChannelResult,\n  UnmutedChannelResult,\n  UpdateChannelRequest,\n  UpdateChannelResult,\n  UpdatedChannelResult,\n} from './channel';\nimport {\n  GetReactionsRequest,\n  GetReactionsResult,\n  GetReactionsSucceededResult,\n  ReactedToMessageResult,\n  Reaction,\n  ReactToMessageRequest,\n  ReactToMessageResult,\n  RemovedReactionResult,\n  RemoveReactionRequest,\n  RemoveReactionResult,\n} from './reaction';\nimport {\n  Keystrokes,\n  SendChannelKeystrokesRequest,\n  SendKeystrokesRequest,\n  SendThreadKeystrokesRequest,\n} from './keystrokes';\nimport {\n  GetReadReceiptsRequest,\n  GetReadReceiptsResult,\n  GetReadReceiptsSucceededResult,\n  ReadReceipt,\n} from './read-receipt';\nimport { ChatKittyPaginator } from './pagination';\nimport {\n  DeleteUserBlockListItemRequest,\n  DeleteUserBlockListItemResult,\n  DeleteUserBlockListItemSucceededResult,\n  GetUserBlockListResult,\n  GetUserBlockListSucceededResult,\n  UserBlockListItem,\n} from './user-block-list-item';\nimport {\n  TriggeredEventResult,\n  TriggerEventRequest,\n  TriggerEventResult,\n  Event,\n} from './event';\nimport {\n  ChatSession,\n  StartChatSessionRequest,\n  StartChatSessionResult,\n  StartedChatSessionResult,\n} from './chat-session';\nimport { debounceTime } from 'rxjs/operators';\nimport {\n  NoActiveSessionError,\n  SessionActiveError,\n  StartedSessionResult,\n  StartSessionRequest,\n  StartSessionResult,\n} from './user-session';\nimport {\n  ChatKittyUploadResult,\n  CreateChatKittyExternalFileProperties,\n  CreateChatKittyFileProperties,\n} from './file';\nimport { environment } from './environment/environment';\nimport { Notification } from './notification';\nimport {\n  GetUserMediaSettingsRequest,\n  GetUserMediaSettingsResult,\n  GetUserMediaSettingsSucceededResult,\n  UserMediaSettings,\n} from './user-media-settings';\n\nexport class ChatKitty {\n  private static readonly _instances = new Map<string, ChatKitty>();\n\n  public static getInstance(apiKey: string): ChatKitty {\n    let instance = ChatKitty._instances.get(apiKey);\n\n    if (instance !== undefined) {\n      return instance;\n    }\n\n    instance = new ChatKitty({ apiKey: apiKey });\n\n    ChatKitty._instances.set(apiKey, instance);\n\n    return instance;\n  }\n\n  private static channelRelay(id: number): string {\n    return '/application/v1/channels/' + id + '.relay';\n  }\n\n  private static userRelay(id: number): string {\n    return '/application/v1/users/' + id + '.relay';\n  }\n\n  private readonly stompX: StompX;\n\n  private readonly currentUserSubject = new BehaviorSubject<CurrentUser | null>(\n    null\n  );\n\n  private readonly lostConnectionSubject = new Subject<void>();\n  private readonly resumedConnectionSubject = new Subject<void>();\n\n  private writeFileGrant?: string;\n  private chatSessions: Map<number, ChatSession> = new Map();\n\n  private messageMapper: MessageMapper = new MessageMapper('');\n\n  private keyStrokesSubject = new Subject<SendKeystrokesRequest>();\n\n  currentUser?: CurrentUser;\n\n  public Calls: Calls = new (class ChatKittyCalls implements Calls {\n    private static callRelay(id: number): string {\n      return '/application/v1/calls/' + id + '.relay';\n    }\n\n    private static userMediaSettingsRelay(id: number): string {\n      return '/application/v1/users/' + id + '.media_settings.relay';\n    }\n\n    public localStream: MediaStream | null = null;\n\n    public currentCall: Call | null = null;\n\n    public isMuted: boolean = false;\n\n    public isCameraOn: boolean = false;\n\n    private configuration: {\n      media: { audio: boolean; video: boolean };\n    } | null = null;\n\n    private readonly participantAcceptedCallSubject = new Subject<User>();\n    private readonly participantDeclinedCallSubject = new Subject<User>();\n    private readonly participantActiveSubject = new Subject<{\n      user: User;\n      stream: MediaStream;\n    }>();\n    private readonly participantLeftCallSubject = new Subject<User>();\n    private readonly participantMediaSettingsUpdatedSubject =\n      new Subject<UserMediaSettings>();\n\n    private readonly callEndedSubject = new Subject<Call>();\n\n    private endCallUnsubscribe?: ChatKittyUnsubscribe;\n\n    constructor(private readonly kitty: ChatKitty) {}\n\n    public async initialize(configuration: {\n      media: { audio: boolean; video: boolean };\n    }) {\n      const isFrontCamera = true;\n      const devices = await mediaDevices.enumerateDevices();\n\n      const facing = isFrontCamera ? 'front' : 'environment';\n      const videoSourceId = devices.find(\n        (device: any) =>\n          device.kind === 'videoinput' && device.facing === facing\n      );\n\n      const facingMode = isFrontCamera ? 'user' : 'environment';\n      const constraints: MediaStreamConstraints = {\n        audio: configuration.media.audio,\n        video: configuration.media.video && {\n          mandatory: {\n            minWidth: 1280,\n            minHeight: 720,\n            minFrameRate: 30,\n          },\n          facingMode,\n          optional: videoSourceId ? [{ sourceId: videoSourceId }] : [],\n        },\n      };\n\n      this.configuration = configuration;\n\n      this.localStream = (await mediaDevices.getUserMedia(\n        constraints\n      )) as MediaStream;\n\n      this.isMuted = !configuration.media.audio;\n      this.isCameraOn = configuration.media.video;\n\n      if (this.kitty.currentUser) {\n        this.kitty.stompX.sendAction({\n          destination:\n            this.kitty.currentUser._actions.updateMediaSettingsAudioEnabled,\n          body: { enabled: !this.isMuted },\n        });\n\n        this.kitty.stompX.sendAction({\n          destination:\n            this.kitty.currentUser._actions.updateMediaSettingsVideoEnabled,\n          body: { enabled: this.isCameraOn },\n        });\n      }\n    }\n\n    public startCall(request: StartCallRequest): Promise<StartCallResult> {\n      return new Promise(async (resolve) => {\n        const type = (request as { type: string }).type;\n\n        let channel: Channel = (request as { channel: Channel }).channel;\n\n        if (!channel) {\n          const members = (request as { members: ChatKittyUserReference[] })\n            .members;\n\n          const result = await this.kitty.createChannel({\n            type: 'DIRECT',\n            members,\n          });\n\n          if (succeeded(result)) {\n            channel = result.channel;\n          }\n\n          if (failed(result)) {\n            resolve(result);\n          }\n        }\n\n        this.kitty.stompX.sendAction<Call>({\n          destination: channel._actions.call,\n          body: {\n            type,\n            properties: request.properties,\n          },\n          onSuccess: (call) => {\n            this.startCallSession(call).then(() =>\n              resolve(new StartedCallResult(call))\n            );\n          },\n          onError: (error) => {\n            resolve(new ChatKittyFailedResult(error));\n          },\n        });\n      });\n    }\n\n    public acceptCall(request: AcceptCallRequest): Promise<AcceptCallResult> {\n      return new Promise((resolve) => {\n        this.startCallSession(request.call).then(() => {\n          resolve(new AcceptedCallResult(request.call));\n        });\n      });\n    }\n\n    public declineCall(\n      request: DeclineCallRequest\n    ): Promise<DeclineCallResult> {\n      return new Promise((resolve) => {\n        this.kitty.stompX.sendAction<never>({\n          destination: request.call._actions.decline,\n          body: {},\n          onSuccess: (call) => {\n            resolve(new DeclinedCallResult(call));\n          },\n          onError: (error) => {\n            resolve(new ChatKittyFailedResult(error));\n          },\n        });\n      });\n    }\n\n    public leaveCall() {\n      this.endCallUnsubscribe?.();\n    }\n\n    switchCamera = () => {\n      if (this.localStream) {\n        this.localStream\n          .getVideoTracks()\n          // @ts-ignore\n          .forEach((track) => track._switchCamera());\n      }\n    };\n\n    toggleMute = () => {\n      if (this.localStream) {\n        this.localStream.getAudioTracks().forEach((track) => {\n          track.enabled = !track.enabled;\n\n          this.isMuted = !track.enabled;\n        });\n\n        if (this.kitty.currentUser) {\n          this.kitty.stompX.sendAction({\n            destination:\n              this.kitty.currentUser._actions.updateMediaSettingsAudioEnabled,\n            body: { enabled: !this.isMuted },\n          });\n        }\n      }\n    };\n\n    toggleCamera = () => {\n      if (this.localStream) {\n        this.localStream.getVideoTracks().forEach((track) => {\n          track.enabled = !track.enabled;\n\n          this.isCameraOn = track.enabled;\n        });\n\n        if (this.kitty.currentUser) {\n          this.kitty.stompX.sendAction({\n            destination:\n              this.kitty.currentUser._actions.updateMediaSettingsVideoEnabled,\n            body: { enabled: this.isCameraOn },\n          });\n        }\n      }\n    };\n\n    public getCalls(request: GetCallsRequest): Promise<GetCallsResult> {\n      const parameters: { active?: boolean } = {};\n\n      const active = request?.filter?.active;\n\n      if (active) {\n        parameters.active = active;\n      }\n\n      return new Promise((resolve) => {\n        ChatKittyPaginator.createInstance<Call>({\n          stompX: this.kitty.stompX,\n          relay: request.channel._relays.calls,\n          contentName: 'calls',\n          parameters: parameters,\n        })\n          .then((paginator) => resolve(new GetCallsSucceededResult(paginator)))\n          .catch((error) => resolve(new ChatKittyFailedResult(error)));\n      });\n    }\n\n    public getCall(id: number): Promise<GetCallResult> {\n      return new Promise((resolve) => {\n        this.kitty.stompX.relayResource<Call>({\n          destination: ChatKittyCalls.callRelay(id),\n          onSuccess: (call) => {\n            resolve(new GetCallSucceededResult(call));\n          },\n          onError: (error) => {\n            resolve(new ChatKittyFailedResult(error));\n          },\n        });\n      });\n    }\n\n    public getCurrentCallParticipants(): Promise<GetUsersResult> {\n      const currentCall = this.currentCall;\n\n      if (!currentCall) {\n        throw new NoActiveCallError();\n      }\n\n      return new Promise((resolve) => {\n        ChatKittyPaginator.createInstance<User>({\n          stompX: this.kitty.stompX,\n          relay: currentCall._relays.participants,\n          contentName: 'users',\n        })\n          .then((paginator) => resolve(new GetUsersSucceededResult(paginator)))\n          .catch((error) => resolve(new ChatKittyFailedResult(error)));\n      });\n    }\n\n    public getUserMediaSettings(\n      request: GetUserMediaSettingsRequest\n    ): Promise<GetUserMediaSettingsResult> {\n      return new Promise((resolve) => {\n        this.kitty.stompX.relayResource<UserMediaSettings>({\n          destination: ChatKittyCalls.userMediaSettingsRelay(request.user.id),\n          onSuccess: (settings) => {\n            resolve(new GetUserMediaSettingsSucceededResult(settings));\n          },\n          onError: (error) => {\n            resolve(new ChatKittyFailedResult(error));\n          },\n        });\n      });\n    }\n\n    public onCallInvite(\n      onNextOrObserver: ChatKittyObserver<Call> | ((call: Call) => void)\n    ): ChatKittyUnsubscribe {\n      const user = this.kitty.currentUser;\n\n      if (!user) {\n        throw new NoActiveSessionError();\n      }\n\n      const unsubscribe = this.kitty.stompX.listenForEvent<Call>({\n        topic: user._topics.calls,\n        event: 'user.call.invited',\n        onSuccess: (call) => {\n          if (typeof onNextOrObserver === 'function') {\n            onNextOrObserver(call);\n          } else {\n            onNextOrObserver.onNext(call);\n          }\n        },\n      });\n\n      return () => unsubscribe;\n    }\n\n    public onCallActive(\n      onNextOrObserver: ChatKittyObserver<Call> | ((call: Call) => void)\n    ): ChatKittyUnsubscribe {\n      const user = this.kitty.currentUser;\n\n      if (!user) {\n        throw new NoActiveSessionError();\n      }\n\n      const unsubscribe = this.kitty.stompX.listenForEvent<Call>({\n        topic: user._topics.calls,\n        event: 'user.call.active',\n        onSuccess: (call) => {\n          if (typeof onNextOrObserver === 'function') {\n            onNextOrObserver(call);\n          } else {\n            onNextOrObserver.onNext(call);\n          }\n        },\n      });\n\n      return () => unsubscribe;\n    }\n\n    public onParticipantAcceptedCall(\n      onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)\n    ): ChatKittyUnsubscribe {\n      const subscription = this.participantAcceptedCallSubject.subscribe(\n        (user) => {\n          if (typeof onNextOrObserver === 'function') {\n            onNextOrObserver(user);\n          } else {\n            onNextOrObserver.onNext(user);\n          }\n        }\n      );\n\n      return () => subscription.unsubscribe();\n    }\n\n    public onParticipantDeclinedCall(\n      onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)\n    ): ChatKittyUnsubscribe {\n      const subscription = this.participantDeclinedCallSubject.subscribe(\n        (user) => {\n          if (typeof onNextOrObserver === 'function') {\n            onNextOrObserver(user);\n          } else {\n            onNextOrObserver.onNext(user);\n          }\n        }\n      );\n\n      return () => subscription.unsubscribe();\n    }\n\n    public onParticipantActive(\n      onNextOrObserver:\n        | ChatKittyObserver<{ user: User; stream: MediaStream }>\n        | ((user: User, stream: MediaStream) => void)\n    ): ChatKittyUnsubscribe {\n      const subscription = this.participantActiveSubject.subscribe((event) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(event.user, event.stream);\n        } else {\n          onNextOrObserver.onNext(event);\n        }\n      });\n\n      return () => subscription.unsubscribe();\n    }\n\n    public onParticipantMediaSettingsUpdated(\n      onNextOrObserver:\n        | ChatKittyObserver<UserMediaSettings>\n        | ((settings: UserMediaSettings) => void)\n    ): ChatKittyUnsubscribe {\n      const subscription =\n        this.participantMediaSettingsUpdatedSubject.subscribe((settings) => {\n          if (typeof onNextOrObserver === 'function') {\n            onNextOrObserver(settings);\n          } else {\n            onNextOrObserver.onNext(settings);\n          }\n        });\n\n      return () => subscription.unsubscribe();\n    }\n\n    public onParticipantLeftCall(\n      onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)\n    ): ChatKittyUnsubscribe {\n      const subscription = this.participantLeftCallSubject.subscribe((user) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(user);\n        } else {\n          onNextOrObserver.onNext(user);\n        }\n      });\n\n      return () => subscription.unsubscribe();\n    }\n\n    public onCallEnded(\n      onNextOrObserver: ChatKittyObserver<Call> | ((call: Call) => void)\n    ): ChatKittyUnsubscribe {\n      const subscription = this.callEndedSubject.subscribe((call) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(call);\n        } else {\n          onNextOrObserver.onNext(call);\n        }\n      });\n\n      return () => subscription.unsubscribe();\n    }\n\n    public close() {\n      this.endCallUnsubscribe?.();\n      this.localStream?.release();\n    }\n\n    private startCallSession(call: Call): Promise<void> {\n      return new Promise((resolve) => {\n        let participantAcceptedCallUnsubscribe: () => void;\n        let participantDeclinedCallUnsubscribe: () => void;\n        let participantLeftCallUnsubscribe: () => void;\n        let userMediaSettingsUpdatedUnsubscribe: () => void;\n\n        participantAcceptedCallUnsubscribe =\n          this.kitty.stompX.listenForEvent<User>({\n            topic: call._topics.participants,\n            event: 'call.participant.accepted',\n            onSuccess: (user) => {\n              this.participantAcceptedCallSubject.next(user);\n            },\n          });\n\n        participantDeclinedCallUnsubscribe =\n          this.kitty.stompX.listenForEvent<User>({\n            topic: call._topics.participants,\n            event: 'call.participant.declined',\n            onSuccess: (user) => {\n              this.participantDeclinedCallSubject.next(user);\n            },\n          });\n\n        participantLeftCallUnsubscribe = this.kitty.stompX.listenForEvent<User>(\n          {\n            topic: call._topics.participants,\n            event: 'call.participant.left',\n            onSuccess: (user) => {\n              this.participantLeftCallSubject.next(user);\n            },\n          }\n        );\n\n        userMediaSettingsUpdatedUnsubscribe =\n          this.kitty.stompX.listenForEvent<UserMediaSettings>({\n            topic: call._topics.userMediaSettings,\n            event: 'call.user_media_settings.updated',\n            onSuccess: (settings) => {\n              this.participantMediaSettingsUpdatedSubject.next(settings);\n            },\n          });\n\n        const signalSubject: Subject<CallSignal> = new Subject<CallSignal>();\n\n        const signalDispatcher = new CallSignalDispatcher(\n          this.kitty.stompX,\n          call\n        );\n\n        const receivedCallSignalUnsubscribe =\n          this.kitty.stompX.listenForEvent<CallSignal>({\n            topic: call._topics.signals,\n            event: 'call.signal.created',\n            onSuccess: (signal) => {\n              signalSubject.next(signal);\n            },\n          });\n\n        let end = () => {\n          userMediaSettingsUpdatedUnsubscribe?.();\n          participantLeftCallUnsubscribe?.();\n          participantDeclinedCallUnsubscribe?.();\n          participantAcceptedCallUnsubscribe?.();\n\n          receivedCallSignalUnsubscribe();\n\n          signalsSubscription.unsubscribe();\n        };\n\n        const connections: Map<number, Connection> = new Map();\n\n        const endedCallUnsubscribe = this.kitty.stompX.listenForEvent<Call>({\n          topic: call._topics.self,\n          event: 'call.self.ended',\n          onSuccess: (endedCall) => {\n            end();\n\n            connections.forEach((connection) => connection.close());\n\n            connections.clear();\n\n            this.callEndedSubject.next(endedCall);\n          },\n        });\n\n        const activeCallUnsubscribe = this.kitty.stompX.listenForEvent<Call>({\n          topic: call._topics.self,\n          event: 'call.self.active',\n          onSuccess: (c) => {\n            this.currentCall = c;\n          },\n        });\n\n        const onCreateOffer = async (\n          signal: CreateOfferCallSignal\n        ): Promise<void> => {\n          const peer = signal.peer;\n\n          if (connections.has(peer.id)) {\n            return;\n          }\n\n          const connection: Connection = new P2PConnection(\n            peer,\n            <MediaStream>this.localStream,\n            signalDispatcher,\n            (user: User, stream: MediaStream) =>\n              this.participantActiveSubject.next({ user, stream })\n          );\n\n          await connection.createOffer();\n\n          connections.set(peer.id, connection);\n        };\n\n        const onAnswerOffer = (signal: AnswerOfferCallSignal): void => {\n          const peer = signal.peer;\n\n          if (connections.has(peer.id)) {\n            return;\n          }\n\n          const connection = new P2PConnection(\n            peer,\n            <MediaStream>this.localStream,\n            signalDispatcher,\n            (user: User, stream: MediaStream) =>\n              this.participantActiveSubject.next({ user, stream })\n          );\n\n          connections.set(peer.id, connection);\n        };\n\n        const onDisconnect = (signal: DisconnectPeerCallSignal): void => {\n          const connection = connections.get(signal.peer.id);\n\n          if (connection) {\n            connection.close();\n          }\n        };\n\n        const signalsSubscription = signalSubject.subscribe({\n          next: async (signal) => {\n            try {\n              if (isCreateOfferCallSignal(signal)) {\n                await onCreateOffer(signal);\n              }\n\n              if (isAnswerOfferCallSignal(signal)) {\n                await onAnswerOffer(signal);\n              }\n\n              if (isAddCandidateCallSignal(signal)) {\n                const connection = connections.get(signal.peer.id);\n\n                if (connection) {\n                  await connection.addCandidate(signal.payload);\n                }\n              }\n\n              if (isSendDescriptionCallSignal(signal)) {\n                const connection = connections.get(signal.peer.id);\n\n                if (connection) {\n                  await connection.answerOffer(signal.payload);\n                }\n              }\n\n              if (isDisconnectPeerCallSignal(signal)) {\n                await onDisconnect(signal);\n              }\n            } catch (e) {\n              console.log(e);\n            }\n          },\n        });\n\n        const callUnsubscribe = this.kitty.stompX.listenToTopic({\n          topic: call._topics.self,\n          onSuccess: () => {\n            const participantsUnsubscribe = this.kitty.stompX.listenToTopic({\n              topic: call._topics.participants,\n            });\n\n            const userMediaSettingsUnsubscribe =\n              this.kitty.stompX.listenToTopic({\n                topic: call._topics.userMediaSettings,\n              });\n\n            const signalsUnsubscribe = this.kitty.stompX.listenToTopic({\n              topic: call._topics.signals,\n            });\n\n            const superEnd = end;\n\n            end = () => {\n              superEnd();\n\n              participantsUnsubscribe();\n              userMediaSettingsUnsubscribe();\n              signalsUnsubscribe();\n              activeCallUnsubscribe();\n              endedCallUnsubscribe();\n\n              callUnsubscribe();\n            };\n\n            this.kitty.stompX.sendAction<never>({\n              destination: call._actions.ready,\n              body: {},\n              onSent: () => {\n                this.currentCall = call;\n\n                this.endCallUnsubscribe = () => {\n                  end();\n\n                  if (this.configuration) {\n                    this.isMuted = !this.configuration.media.audio;\n                    this.isCameraOn = this.configuration.media.video;\n                  }\n\n                  this.currentCall = null;\n                  this.endCallUnsubscribe = undefined;\n                };\n\n                resolve();\n              },\n            });\n          },\n        });\n      });\n    }\n  })(this);\n\n  public constructor(private readonly configuration: ChatKittyConfiguration) {\n    this.stompX = new StompX({\n      isSecure: configuration.isSecure === undefined || configuration.isSecure,\n      host: configuration.host || 'api.chatkitty.com',\n      isDebug: !environment.production,\n    });\n\n    this.keyStrokesSubject\n      .asObservable()\n      .pipe(debounceTime(150))\n      .subscribe((request) => {\n        let destination = '';\n\n        const channel = (request as SendChannelKeystrokesRequest).channel;\n        const thread = (request as SendThreadKeystrokesRequest).thread;\n\n        if (channel) {\n          destination = channel._actions.keystrokes;\n        }\n\n        if (thread) {\n          destination = thread._actions.keystrokes;\n        }\n\n        this.stompX.sendAction<never>({\n          destination,\n          body: {\n            keys: request.keys,\n          },\n        });\n      });\n  }\n\n  public startSession(\n    request: StartSessionRequest\n  ): Promise<StartSessionResult> {\n    if (this.stompX.initialized) {\n      throw new SessionActiveError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.connect<CurrentUser>({\n        apiKey: this.configuration.apiKey,\n        username: request.username,\n        authParams: request.authParams,\n        onSuccess: (user, writeFileGrant, readFileGrant) => {\n          this.stompX.listenToTopic({ topic: user._topics.self });\n          this.stompX.listenToTopic({ topic: user._topics.channels });\n          this.stompX.listenToTopic({ topic: user._topics.messages });\n          this.stompX.listenToTopic({ topic: user._topics.notifications });\n          this.stompX.listenToTopic({ topic: user._topics.contacts });\n          this.stompX.listenToTopic({ topic: user._topics.participants });\n          this.stompX.listenToTopic({ topic: user._topics.users });\n          this.stompX.listenToTopic({ topic: user._topics.reactions });\n          this.stompX.listenToTopic({ topic: user._topics.threads });\n          this.stompX.listenToTopic({ topic: user._topics.calls });\n\n          this.writeFileGrant = writeFileGrant;\n\n          this.messageMapper = new MessageMapper(readFileGrant);\n\n          resolve(new StartedSessionResult({ user: user }));\n        },\n        onConnected: (user) => {\n          this.currentUser = user;\n\n          this.currentUserSubject.next(user);\n        },\n        onConnectionLost: () => this.lostConnectionSubject.next(),\n        onConnectionResumed: () => this.resumedConnectionSubject.next(),\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public endSession(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.stompX.disconnect({\n        onSuccess: () => {\n          this.currentUser = undefined;\n          this.currentUserSubject.next(null);\n\n          resolve();\n        },\n        onError: (e) => {\n          reject(e);\n        },\n      });\n    });\n  }\n\n  public getCurrentUser(): Promise<GetCurrentUserResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.relayResource<CurrentUser>({\n        destination: currentUser._relays.self,\n        onSuccess: (user) => {\n          resolve(new GetCurrentUserSuccessfulResult(user));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public onCurrentUserChanged(\n    onNextOrObserver:\n      | ChatKittyObserver<CurrentUser | null>\n      | ((user: CurrentUser | null) => void)\n  ): ChatKittyUnsubscribe {\n    const subscription = this.currentUserSubject.subscribe((user) => {\n      if (typeof onNextOrObserver === 'function') {\n        onNextOrObserver(user);\n      } else {\n        onNextOrObserver.onNext(user);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }\n\n  public onCurrentUserOnline(\n    onNextOrObserver: ChatKittyObserver<CurrentUser> | (() => void)\n  ): ChatKittyUnsubscribe {\n    const subscription = this.resumedConnectionSubject.subscribe(() => {\n      if (typeof onNextOrObserver === 'function') {\n        onNextOrObserver();\n      } else {\n        if (this.currentUser) {\n          onNextOrObserver.onNext(this.currentUser);\n        }\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }\n\n  public onCurrentUserOffline(\n    onNextOrObserver: ChatKittyObserver<CurrentUser> | (() => void)\n  ): ChatKittyUnsubscribe {\n    const subscription = this.lostConnectionSubject.subscribe(() => {\n      if (typeof onNextOrObserver === 'function') {\n        onNextOrObserver();\n      } else {\n        if (this.currentUser) {\n          onNextOrObserver.onNext(this.currentUser);\n        }\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }\n\n  public updateCurrentUser(\n    update: (user: CurrentUser) => CurrentUser\n  ): Promise<UpdateCurrentUserResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<CurrentUser>({\n        destination: currentUser._actions.update,\n        body: update(currentUser),\n        onSuccess: (user) => {\n          this.currentUserSubject.next(user);\n\n          resolve(new UpdatedCurrentUserResult(user));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public updateCurrentUserDisplayPicture(\n    request: UpdateCurrentUserDisplayPictureRequest\n  ): Promise<UpdateCurrentUserDisplayPictureResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      const file = request.file;\n\n      // eslint-disable-next-line no-undef\n      if (file instanceof Blob) {\n        this.stompX.sendToStream<CurrentUser>({\n          stream: currentUser._streams.displayPicture,\n          grant: <string>this.writeFileGrant,\n          blob: file,\n          onSuccess: (user) => {\n            resolve(new UpdatedCurrentUserDisplayPictureResult(user));\n          },\n          onError: (error) => {\n            resolve(new ChatKittyFailedResult(error));\n          },\n          progressListener: {\n            onStarted: () => request.progressListener?.onStarted?.(),\n            onProgress: (progress) =>\n              request.progressListener?.onProgress(progress),\n            onCompleted: () =>\n              request.progressListener?.onCompleted(\n                ChatKittyUploadResult.COMPLETED\n              ),\n            onFailed: () =>\n              request.progressListener?.onCompleted(\n                ChatKittyUploadResult.FAILED\n              ),\n            onCancelled: () =>\n              request.progressListener?.onCompleted(\n                ChatKittyUploadResult.CANCELLED\n              ),\n          },\n        });\n      } else {\n        this.stompX.sendAction<CurrentUser>({\n          destination: currentUser._actions.updateDisplayPicture,\n          body: file,\n          onSuccess: (user) => {\n            resolve(new UpdatedCurrentUserResult(user));\n          },\n          onError: (error) => {\n            resolve(new ChatKittyFailedResult(error));\n          },\n        });\n      }\n    });\n  }\n\n  public updateChannel(\n    request: UpdateChannelRequest\n  ): Promise<UpdateChannelResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Channel>({\n        destination: request.channel._actions.update,\n        body: request.channel,\n        onSuccess: (channel) => {\n          resolve(new UpdatedChannelResult(channel));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public deleteChannel(\n    request: DeleteChannelRequest\n  ): Promise<DeleteChannelResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<void>({\n        destination: request.channel._actions.delete,\n        body: {},\n        onSuccess: () => {\n          resolve(new DeletedChannelResult());\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public createChannel(\n    request: CreateChannelRequest\n  ): Promise<CreateChannelResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Channel>({\n        destination: currentUser._actions.createChannel,\n        events: [\n          'user.channel.created',\n          'user.channel.upserted',\n          'member.channel.upserted',\n        ],\n        body: request,\n        onSuccess: (channel) => {\n          resolve(new CreatedChannelResult(channel));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public getChannels(request?: GetChannelsRequest): Promise<GetChannelsResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      const parameters: { subscribable?: boolean; name?: string } = {};\n\n      let relay = currentUser._relays.channels;\n\n      if (isGetChannelsRequest(request)) {\n        if (request.filter?.joined === false) {\n          relay = currentUser._relays.joinableChannels;\n        }\n\n        if (request.filter?.joined === true) {\n          parameters.subscribable = true;\n        }\n\n        if (request.filter?.unread) {\n          relay = currentUser._relays.unreadChannels;\n        }\n      }\n\n      const name = request?.filter?.name;\n\n      if (name) {\n        parameters.name = name;\n      }\n\n      ChatKittyPaginator.createInstance<Channel>({\n        stompX: this.stompX,\n        relay: relay,\n        contentName: 'channels',\n        parameters: parameters,\n      })\n        .then((paginator) => resolve(new GetChannelsSucceededResult(paginator)))\n        .catch((error) => resolve(new ChatKittyFailedResult(error)));\n    });\n  }\n\n  public getChannel(id: number): Promise<GetChannelResult> {\n    return new Promise((resolve) => {\n      this.stompX.relayResource<Channel>({\n        destination: ChatKitty.channelRelay(id),\n        onSuccess: (channel) => {\n          resolve(new GetChannelSucceededResult(channel));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public joinChannel(request: JoinChannelRequest): Promise<JoinChannelResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const destination = request.channel._actions.join;\n\n    if (!destination) {\n      throw new ChannelNotPubliclyJoinableError(request.channel);\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Channel>({\n        destination: destination,\n        body: request,\n        onSuccess: (channel) => {\n          resolve(new JoinedChannelResult(channel));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public leaveChannel(\n    request: LeaveChannelRequest\n  ): Promise<LeaveChannelResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const destination = request.channel._actions.leave;\n\n    if (!destination) {\n      throw new NotAChannelMemberError(request.channel);\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Channel>({\n        destination: destination,\n        body: {},\n        onSuccess: (channel) => {\n          resolve(new LeftChannelResult(channel));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public addChannelModerator(\n    request: AddChannelModeratorRequest\n  ): Promise<AddChannelModeratorResult> {\n    const destination = request.channel._actions.addModerator;\n\n    if (!destination) {\n      throw new CannotAddModeratorToChannelError(request.channel);\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Channel>({\n        destination: destination,\n        body: request.user,\n        onSuccess: (channel) => {\n          resolve(new AddedChannelModeratorResult(channel));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public getUnreadChannelsCount(\n    request?: GetUnreadChannelsRequest\n  ): Promise<GetCountResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const parameters: { unread: true; type?: string } = {\n      unread: true,\n    };\n\n    if (isGetChannelsUnreadRequest(request)) {\n      parameters.type = request.filter?.type;\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.relayResource<{ count: number }>({\n        destination: currentUser._relays.channelsCount,\n        parameters: parameters,\n        onSuccess: (resource) => {\n          resolve(new GetCountSucceedResult(resource.count));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public getChannelUnread(\n    request: GetChannelUnreadRequest\n  ): Promise<GetChannelUnreadResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.relayResource<{ exists: boolean }>({\n        destination: request.channel._relays.unread,\n        onSuccess: (resource) => {\n          resolve(new GetChannelUnreadSucceededResult(resource.exists));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public readChannel(request: ReadChannelRequest): Promise<ReadChannelResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<never>({\n        destination: request.channel._actions.read,\n        body: {},\n        onSent: () => resolve(new ReadChannelSucceededResult(request.channel)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public muteChannel(request: MuteChannelRequest): Promise<MuteChannelResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Channel>({\n        destination: request.channel._actions.mute,\n        body: {\n          state: 'ON',\n        },\n        onSuccess: (channel) => {\n          resolve(new MutedChannelResult(channel));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public unmuteChannel(\n    request: UnmuteChannelRequest\n  ): Promise<UnmuteChannelResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Channel>({\n        destination: request.channel._actions.mute,\n        body: {\n          state: 'OFF',\n        },\n        onSuccess: (channel) => {\n          resolve(new UnmutedChannelResult(channel));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public clearChannelHistory(\n    request: ClearChannelHistoryRequest\n  ): Promise<ClearChannelHistoryResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<never>({\n        destination: request.channel._actions.clearHistory,\n        body: {},\n        onSuccess: (channel) =>\n          resolve(new ClearChannelHistorySucceededResult(channel)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public hideChannel(request: HideChannelRequest): Promise<HideChannelResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<DirectChannel>({\n        destination: request.channel._actions.hide,\n        body: {},\n        onSuccess: (resource) =>\n          resolve(new HideChannelSucceededResult(resource)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public startChatSession(\n    request: StartChatSessionRequest\n  ): StartChatSessionResult {\n    const onReceivedMessage = request.onReceivedMessage;\n    const onReceivedKeystrokes = request.onReceivedKeystrokes;\n    const onParticipantEnteredChat = request.onParticipantEnteredChat;\n    const onParticipantLeftChat = request.onParticipantLeftChat;\n    const onTypingStarted = request.onTypingStarted;\n    const onTypingStopped = request.onTypingStopped;\n    const onParticipantPresenceChanged = request.onParticipantPresenceChanged;\n    const onEventTriggered = request.onEventTriggered;\n    const onMessageUpdated = request.onMessageUpdated;\n    const onChannelUpdated = request.onChannelUpdated;\n    const onMessageRead = request.onMessageRead;\n    const onMessageReactionAdded = request.onMessageReactionAdded;\n    const onMessageReactionRemoved = request.onMessageReactionRemoved;\n    const onThreadReceivedMessage = request.onThreadReceivedMessage;\n    const onThreadReceivedKeystrokes = request.onThreadReceivedKeystrokes;\n    const onThreadTypingStarted = request.onThreadTypingStarted;\n    const onThreadTypingStopped = request.onThreadTypingStopped;\n\n    let receivedMessageUnsubscribe: () => void;\n    let receivedKeystrokesUnsubscribe: () => void;\n    let participantEnteredChatUnsubscribe: () => void;\n    let participantLeftChatUnsubscribe: () => void;\n    let typingStartedUnsubscribe: () => void;\n    let typingStoppedUnsubscribe: () => void;\n    let participantPresenceChangedUnsubscribe: () => void;\n    let eventTriggeredUnsubscribe: () => void;\n    let messageUpdatedUnsubscribe: () => void;\n    let channelUpdatedUnsubscribe: () => void;\n    let messageReadUnsubscribe: () => void;\n    let messageReactionAddedUnsubscribe: () => void;\n    let messageReactionRemovedUnsubscribe: () => void;\n    let threadReceivedMessageUnsubscribe: () => void;\n    let threadReceivedKeystrokesUnsubscribe: () => void;\n    let threadTypingStartedUnsubscribe: () => void;\n    let threadTypingStoppedUnsubscribe: () => void;\n\n    if (onReceivedMessage) {\n      receivedMessageUnsubscribe = this.stompX.listenForEvent<Message>({\n        topic: request.channel._topics.messages,\n        event: 'channel.message.created',\n        onSuccess: (message) => {\n          const destination = message._relays.parent;\n\n          if (destination) {\n            this.stompX.relayResource<Message>({\n              destination,\n              onSuccess: (parent) => {\n                onReceivedMessage(\n                  this.messageMapper.map(message),\n                  this.messageMapper.map(parent)\n                );\n              },\n            });\n          } else {\n            onReceivedMessage(this.messageMapper.map(message));\n          }\n        },\n      });\n    }\n\n    if (onReceivedKeystrokes) {\n      receivedKeystrokesUnsubscribe = this.stompX.listenForEvent<Keystrokes>({\n        topic: request.channel._topics.keystrokes,\n        event: 'thread.keystrokes.created',\n        onSuccess: (keystrokes) => {\n          onReceivedKeystrokes(keystrokes);\n        },\n      });\n    }\n\n    if (onTypingStarted) {\n      typingStartedUnsubscribe = this.stompX.listenForEvent<User>({\n        topic: request.channel._topics.typing,\n        event: 'thread.typing.started',\n        onSuccess: (user) => {\n          onTypingStarted(user);\n        },\n      });\n    }\n\n    if (onTypingStopped) {\n      typingStoppedUnsubscribe = this.stompX.listenForEvent<User>({\n        topic: request.channel._topics.typing,\n        event: 'thread.typing.stopped',\n        onSuccess: (user) => {\n          onTypingStopped(user);\n        },\n      });\n    }\n\n    if (onParticipantEnteredChat) {\n      participantEnteredChatUnsubscribe = this.stompX.listenForEvent<User>({\n        topic: request.channel._topics.participants,\n        event: 'channel.participant.active',\n        onSuccess: (user) => {\n          onParticipantEnteredChat(user);\n        },\n      });\n    }\n\n    if (onParticipantLeftChat) {\n      participantLeftChatUnsubscribe = this.stompX.listenForEvent<User>({\n        topic: request.channel._topics.participants,\n        event: 'channel.participant.inactive',\n        onSuccess: (user) => {\n          onParticipantLeftChat(user);\n        },\n      });\n    }\n\n    if (onParticipantPresenceChanged) {\n      participantPresenceChangedUnsubscribe = this.stompX.listenForEvent<User>({\n        topic: request.channel._topics.participants,\n        event: 'participant.presence.changed',\n        onSuccess: (user) => {\n          onParticipantPresenceChanged(user);\n        },\n      });\n    }\n\n    if (onMessageUpdated) {\n      messageUpdatedUnsubscribe = this.stompX.listenForEvent<Message>({\n        topic: request.channel._topics.messages,\n        event: 'channel.message.updated',\n        onSuccess: (message) => {\n          onMessageUpdated(message);\n        },\n      });\n    }\n\n    if (onEventTriggered) {\n      eventTriggeredUnsubscribe = this.stompX.listenForEvent<Event>({\n        topic: request.channel._topics.events,\n        event: 'channel.event.triggered',\n        onSuccess: (event) => {\n          onEventTriggered(event);\n        },\n      });\n    }\n\n    if (onChannelUpdated) {\n      channelUpdatedUnsubscribe = this.stompX.listenForEvent<Channel>({\n        topic: request.channel._topics.self,\n        event: 'channel.self.updated',\n        onSuccess: (channel) => {\n          onChannelUpdated(channel);\n        },\n      });\n    }\n\n    if (onMessageRead) {\n      messageReadUnsubscribe = this.stompX.listenForEvent<ReadReceipt>({\n        topic: request.channel._topics.readReceipts,\n        event: 'message.read_receipt.created',\n        onSuccess: (receipt) => {\n          this.stompX.relayResource<Message>({\n            destination: receipt._relays.message,\n            onSuccess: (message) => {\n              onMessageRead(message, receipt);\n            },\n          });\n        },\n      });\n    }\n\n    if (onMessageReactionAdded) {\n      messageReactionAddedUnsubscribe = this.stompX.listenForEvent<Reaction>({\n        topic: request.channel._topics.reactions,\n        event: 'message.reaction.created',\n        onSuccess: (reaction) => {\n          this.stompX.relayResource<Message>({\n            destination: reaction._relays.message,\n            onSuccess: (message) => {\n              onMessageReactionAdded(message, reaction);\n            },\n          });\n        },\n      });\n    }\n\n    if (onMessageReactionRemoved) {\n      messageReactionRemovedUnsubscribe = this.stompX.listenForEvent<Reaction>({\n        topic: request.channel._topics.reactions,\n        event: 'message.reaction.removed',\n        onSuccess: (reaction) => {\n          this.stompX.relayResource<Message>({\n            destination: reaction._relays.message,\n            onSuccess: (message) => {\n              onMessageReactionRemoved(message, reaction);\n            },\n          });\n        },\n      });\n    }\n\n    let end = () => {\n      messageReactionRemovedUnsubscribe?.();\n      messageReactionAddedUnsubscribe?.();\n      messageReadUnsubscribe?.();\n      channelUpdatedUnsubscribe?.();\n      messageUpdatedUnsubscribe?.();\n      eventTriggeredUnsubscribe?.();\n      participantPresenceChangedUnsubscribe?.();\n      participantLeftChatUnsubscribe?.();\n      participantEnteredChatUnsubscribe?.();\n      typingStoppedUnsubscribe?.();\n      typingStartedUnsubscribe?.();\n      receivedKeystrokesUnsubscribe?.();\n      receivedMessageUnsubscribe?.();\n      threadReceivedMessageUnsubscribe?.();\n      threadReceivedKeystrokesUnsubscribe?.();\n      threadTypingStartedUnsubscribe?.();\n      threadTypingStoppedUnsubscribe?.();\n    };\n\n    const channelUnsubscribe = this.stompX.listenToTopic({\n      topic: request.channel._topics.self,\n      onSuccess: () => {\n        const messagesUnsubscribe = this.stompX.listenToTopic({\n          topic: request.channel._topics.messages,\n        });\n\n        const keystrokesUnsubscribe = this.stompX.listenToTopic({\n          topic: request.channel._topics.keystrokes,\n        });\n\n        const typingUnsubscribe = this.stompX.listenToTopic({\n          topic: request.channel._topics.typing,\n        });\n\n        const participantsUnsubscribe = this.stompX.listenToTopic({\n          topic: request.channel._topics.participants,\n        });\n\n        const readReceiptsUnsubscribe = this.stompX.listenToTopic({\n          topic: request.channel._topics.readReceipts,\n        });\n\n        const reactionsUnsubscribe = this.stompX.listenToTopic({\n          topic: request.channel._topics.reactions,\n        });\n\n        const eventsUnsubscribe = this.stompX.listenToTopic({\n          topic: request.channel._topics.events,\n        });\n\n        const superEnd = end;\n\n        end = () => {\n          superEnd();\n\n          eventsUnsubscribe?.();\n          reactionsUnsubscribe?.();\n          readReceiptsUnsubscribe?.();\n          participantsUnsubscribe?.();\n          typingUnsubscribe?.();\n          keystrokesUnsubscribe?.();\n          messagesUnsubscribe?.();\n\n          channelUnsubscribe();\n\n          this.chatSessions.delete(request.channel.id);\n        };\n      },\n    });\n\n    let activeThread: Thread | null = null;\n\n    const session = {\n      channel: request.channel,\n      thread: activeThread,\n      end: () => end(),\n      setThread: (thread: Thread) => {\n        threadReceivedMessageUnsubscribe?.();\n        threadReceivedKeystrokesUnsubscribe?.();\n        threadTypingStartedUnsubscribe?.();\n        threadTypingStoppedUnsubscribe?.();\n\n        if (onThreadReceivedMessage) {\n          threadReceivedMessageUnsubscribe =\n            this.stompX.listenForEvent<Message>({\n              topic: thread._topics.messages,\n              event: 'thread.message.created',\n              onSuccess: (message) => {\n                onThreadReceivedMessage(\n                  thread,\n                  this.messageMapper.map(message)\n                );\n              },\n            });\n        }\n\n        if (onThreadReceivedKeystrokes) {\n          threadReceivedKeystrokesUnsubscribe =\n            this.stompX.listenForEvent<Keystrokes>({\n              topic: thread._topics.keystrokes,\n              event: 'thread.keystrokes.created',\n              onSuccess: (keystrokes) => {\n                onThreadReceivedKeystrokes(thread, keystrokes);\n              },\n            });\n        }\n\n        if (onThreadTypingStarted) {\n          threadTypingStartedUnsubscribe = this.stompX.listenForEvent<User>({\n            topic: thread._topics.typing,\n            event: 'thread.typing.started',\n            onSuccess: (user) => {\n              onThreadTypingStarted(thread, user);\n            },\n          });\n        }\n\n        if (onThreadTypingStopped) {\n          threadTypingStoppedUnsubscribe = this.stompX.listenForEvent<User>({\n            topic: thread._topics.typing,\n            event: 'thread.typing.stopped',\n            onSuccess: (user) => {\n              onThreadTypingStopped(thread, user);\n            },\n          });\n        }\n\n        activeThread = thread;\n      },\n    };\n\n    this.chatSessions.set(request.channel.id, session);\n\n    return new StartedChatSessionResult(session);\n  }\n\n  public sendMessage(request: SendMessageRequest): Promise<SendMessageResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      let destination = '';\n      let stream = '';\n\n      const sendChannelMessageRequest = request as SendChannelMessageRequest;\n\n      if (sendChannelMessageRequest.channel !== undefined) {\n        destination = sendChannelMessageRequest.channel._actions.message;\n        stream = sendChannelMessageRequest.channel._streams.messages;\n      }\n\n      const sendMessageReplyRequest = request as SendMessageReplyRequest;\n\n      if (sendMessageReplyRequest.message !== undefined) {\n        destination = sendMessageReplyRequest.message._actions.reply;\n        stream = sendMessageReplyRequest.message._streams.replies;\n      }\n\n      const sendThreadMessageRequest = request as SendThreadMessageRequest;\n\n      if (sendThreadMessageRequest.thread !== undefined) {\n        destination = sendThreadMessageRequest.thread._actions.message;\n        stream = sendThreadMessageRequest.thread._streams.messages;\n      }\n\n      if (isSendChannelTextMessageRequest(request)) {\n        this.stompX.sendAction<TextUserMessage>({\n          destination: destination,\n          body: {\n            type: 'TEXT',\n            body: request.body,\n            groupTag: request.groupTag,\n            properties: request.properties,\n          },\n          onSuccess: (message) => {\n            resolve(new SentTextMessageResult(this.messageMapper.map(message)));\n          },\n          onError: (error) => {\n            resolve(new ChatKittyFailedResult(error));\n          },\n        });\n      }\n\n      if (isSendChannelFileMessageRequest(request)) {\n        const file = request.file;\n\n        if (isCreateChatKittyExternalFileProperties(file)) {\n          this.stompX.sendAction<FileUserMessage>({\n            destination: destination,\n            body: {\n              type: 'FILE',\n              file: file,\n              groupTag: request.groupTag,\n              properties: request.properties,\n            },\n            onSuccess: (message) => {\n              resolve(\n                new SentFileMessageResult(this.messageMapper.map(message))\n              );\n            },\n            onError: (error) => {\n              resolve(new ChatKittyFailedResult(error));\n            },\n          });\n        } else {\n          const properties: Map<string, unknown> = new Map();\n\n          if (request.groupTag) {\n            properties.set('groupTag', request.groupTag);\n          }\n\n          if (request.properties) {\n            properties.set('properties', request.properties);\n          }\n\n          this.stompX.sendToStream<FileUserMessage>({\n            stream: stream,\n            grant: <string>this.writeFileGrant,\n            blob: file as Blob,\n            properties: properties,\n            onSuccess: (message) => {\n              resolve(\n                new SentFileMessageResult(this.messageMapper.map(message))\n              );\n            },\n            onError: (error) => {\n              resolve(new ChatKittyFailedResult(error));\n            },\n            progressListener: {\n              onStarted: () => request.progressListener?.onStarted?.(),\n              onProgress: (progress) =>\n                request.progressListener?.onProgress(progress),\n              onCompleted: () =>\n                request.progressListener?.onCompleted(\n                  ChatKittyUploadResult.COMPLETED\n                ),\n              onFailed: () =>\n                request.progressListener?.onCompleted(\n                  ChatKittyUploadResult.FAILED\n                ),\n              onCancelled: () =>\n                request.progressListener?.onCompleted(\n                  ChatKittyUploadResult.CANCELLED\n                ),\n            },\n          });\n        }\n      }\n    });\n  }\n\n  public getMessages(request: GetMessagesRequest): Promise<GetMessagesResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    let relay = '';\n\n    let parameters: Record<string, unknown> | undefined;\n\n    if (isGetChannelMessagesRequest(request)) {\n      relay = request.channel._relays.messages;\n\n      parameters = {\n        ...request.filter,\n      };\n    }\n\n    if (isGetMessageRepliesRequest(request)) {\n      relay = request.message._relays.replies;\n    }\n\n    return new Promise((resolve) => {\n      ChatKittyPaginator.createInstance<Message>({\n        stompX: this.stompX,\n        relay: relay,\n        parameters: parameters,\n        contentName: 'messages',\n        mapper: (message) => this.messageMapper.map(message),\n      })\n        .then((paginator) => resolve(new GetMessagesSucceededResult(paginator)))\n        .catch((error) => resolve(new ChatKittyFailedResult(error)));\n    });\n  }\n\n  public getUnreadMessagesCount(\n    request?: GetUnreadMessagesCountRequest\n  ): Promise<GetCountResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    let relay = currentUser._relays.unreadMessagesCount;\n\n    if (isGetUnreadMessagesCountRequest(request)) {\n      relay = request.channel._relays.messagesCount;\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.relayResource<{ count: number }>({\n        destination: relay,\n        parameters: {\n          unread: true,\n        },\n        onSuccess: (resource) => {\n          resolve(new GetCountSucceedResult(resource.count));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public triggerEvent(\n    request: TriggerEventRequest\n  ): Promise<TriggerEventResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<never>({\n        destination: request.channel._actions.triggerEvent,\n        body: {\n          type: request.type,\n          properties: request.properties,\n        },\n        onSent: () => {\n          resolve(new TriggeredEventResult(request.channel));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public readMessage(request: ReadMessageRequest): Promise<ReadMessageResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<never>({\n        destination: request.message._actions.read,\n        body: {},\n        onSent: () => resolve(new ReadMessageSucceededResult(request.message)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public getLastReadMessage(\n    request: GetLastReadMessageRequest\n  ): Promise<GetLastReadMessageResult> {\n    return new Promise((resolve) => {\n      this.stompX.relayResource<Message>({\n        destination: request.channel._relays.lastReadMessage,\n        parameters: {\n          username: request.username,\n        },\n        onSuccess: (resource) => {\n          resolve(new GetLastReadMessageResult(resource));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public editMessage(request: EditMessageRequest): Promise<EditMessageResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Message>({\n        destination: request.message._actions.edit,\n        body: {\n          body: request.body,\n        },\n        onSuccess: (message) =>\n          resolve(new EditedMessageSucceededResult(message)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public getMessageRepliesCount(\n    request: GetMessageRepliesCountRequest\n  ): Promise<GetCountResult> {\n    return new Promise((resolve) => {\n      this.stompX.relayResource<{ count: number }>({\n        destination: request.message._relays.repliesCount,\n        onSuccess: (resource) => {\n          resolve(new GetCountSucceedResult(resource.count));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public getMessageChannel(\n    request: GetMessageChannelRequest\n  ): Promise<GetMessageChannelResult> {\n    return new Promise((resolve) => {\n      this.stompX.relayResource<Channel>({\n        destination: request.message._relays.channel,\n        onSuccess: (resource) => {\n          resolve(new GetMessageChannelSucceededResult(resource));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public getMessageParent(\n    request: GetMessageParentRequest\n  ): Promise<GetMessageParentResult> {\n    return new Promise((resolve) => {\n      const destination = request.message._relays.parent;\n\n      if (!destination) {\n        throw new MessageNotAReplyError(request.message);\n      }\n\n      this.stompX.relayResource<Message>({\n        destination,\n        onSuccess: (resource) => {\n          resolve(new GetMessageParentSucceededResult(resource));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public createThread(\n    request: CreateThreadRequest\n  ): Promise<CreateThreadResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Thread>({\n        destination: request.channel._actions.createThread,\n        body: { name: request.name, properties: request.properties },\n        onSuccess: (thread) => resolve(new CreatedThreadResult(thread)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public getThreads(request: GetThreadsRequest): Promise<GetThreadsResult> {\n    const parameters: { includeMainThread?: false; standalone?: true } = {};\n\n    if (request.filter?.includeMainThread === false) {\n      parameters.includeMainThread = false;\n    }\n\n    if (request.filter?.standalone === true) {\n      parameters.standalone = true;\n    }\n\n    return new Promise((resolve) => {\n      ChatKittyPaginator.createInstance<Thread>({\n        stompX: this.stompX,\n        relay: request.channel._relays.threads,\n        contentName: 'threads',\n        parameters,\n      })\n        .then((paginator) => resolve(new GetThreadsSucceededResult(paginator)))\n        .catch((error) => resolve(new ChatKittyFailedResult(error)));\n    });\n  }\n\n  public getThreadChannel(\n    request: GetThreadChannelRequest\n  ): Promise<GetThreadChannelResult> {\n    return new Promise((resolve) => {\n      this.stompX.relayResource<Channel>({\n        destination: request.thread._relays.channel,\n        onSuccess: (resource) => {\n          resolve(new GetThreadChannelSucceededResult(resource));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public getThreadMessage(\n    request: GetThreadMessageRequest\n  ): Promise<GetThreadMessageResult> {\n    return new Promise((resolve) => {\n      this.stompX.relayResource<Message>({\n        destination: request.thread._relays.message,\n        onSuccess: (resource) => {\n          resolve(new GetThreadMessageSucceededResult(resource));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public readThread(request: ReadThreadRequest): Promise<ReadThreadResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<never>({\n        destination: request.thread._actions.read,\n        body: {},\n        onSent: () => resolve(new ReadThreadSucceededResult(request.thread)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public reactToMessage(\n    request: ReactToMessageRequest\n  ): Promise<ReactToMessageResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Reaction>({\n        destination: request.message._actions.react,\n        body: { emoji: request.emoji },\n        onSuccess: (reaction) => resolve(new ReactedToMessageResult(reaction)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public getReactions(\n    request: GetReactionsRequest\n  ): Promise<GetReactionsResult> {\n    return new Promise((resolve) => {\n      ChatKittyPaginator.createInstance<Reaction>({\n        stompX: this.stompX,\n        relay: request.message._relays.reactions,\n        contentName: 'reactions',\n      })\n        .then((paginator) =>\n          resolve(new GetReactionsSucceededResult(paginator))\n        )\n        .catch((error) => resolve(new ChatKittyFailedResult(error)));\n    });\n  }\n\n  public removeReaction(\n    request: RemoveReactionRequest\n  ): Promise<RemoveReactionResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Reaction>({\n        destination: request.message._actions.removeReaction,\n        body: {\n          emoji: request.emoji,\n        },\n        onSuccess: (reaction) => resolve(new RemovedReactionResult(reaction)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public deleteMessageForMe(\n    request: DeleteMessageForMeRequest\n  ): Promise<DeleteMessageForMeResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Message>({\n        destination: request.message._actions.deleteForMe,\n        body: {},\n        onSuccess: (resource) =>\n          resolve(new DeleteMessageForMeSucceededResult(resource)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public deleteMessage(\n    request: DeleteMessageRequest\n  ): Promise<DeleteMessageResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<Message>({\n        destination: request.message._actions.delete,\n        body: {},\n        onSuccess: (resource) =>\n          resolve(new DeleteMessageSucceededResult(resource)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public sendKeystrokes(request: SendKeystrokesRequest) {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    this.keyStrokesSubject.next(request);\n  }\n\n  public onNotificationReceived(\n    onNextOrObserver:\n      | ChatKittyObserver<Notification>\n      | ((notification: Notification) => void)\n  ): ChatKittyUnsubscribe {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const unsubscribe = this.stompX.listenForEvent<Notification>({\n      topic: currentUser._topics.notifications,\n      event: 'user.notification.created',\n      onSuccess: (notification) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(notification);\n        } else {\n          onNextOrObserver.onNext(notification);\n        }\n      },\n    });\n\n    return () => unsubscribe;\n  }\n\n  public onChannelJoined(\n    onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)\n  ): ChatKittyUnsubscribe {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const unsubscribe = this.stompX.listenForEvent<Channel>({\n      topic: currentUser._topics.channels,\n      event: 'user.channel.joined',\n      onSuccess: (channel) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(channel);\n        } else {\n          onNextOrObserver.onNext(channel);\n        }\n      },\n    });\n\n    return () => unsubscribe;\n  }\n\n  public onChannelHidden(\n    onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)\n  ): ChatKittyUnsubscribe {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const unsubscribe = this.stompX.listenForEvent<Channel>({\n      topic: currentUser._topics.channels,\n      event: 'user.channel.hidden',\n      onSuccess: (channel) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(channel);\n        } else {\n          onNextOrObserver.onNext(channel);\n        }\n      },\n    });\n\n    return () => unsubscribe;\n  }\n\n  public onChannelUnhidden(\n    onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)\n  ): ChatKittyUnsubscribe {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const unsubscribe = this.stompX.listenForEvent<Channel>({\n      topic: currentUser._topics.channels,\n      event: 'user.channel.unhidden',\n      onSuccess: (channel) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(channel);\n        } else {\n          onNextOrObserver.onNext(channel);\n        }\n      },\n    });\n\n    return () => unsubscribe;\n  }\n\n  public onChannelLeft(\n    onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)\n  ): ChatKittyUnsubscribe {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const unsubscribe = this.stompX.listenForEvent<Channel>({\n      topic: currentUser._topics.channels,\n      event: 'user.channel.left',\n      onSuccess: (channel) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(channel);\n        } else {\n          onNextOrObserver.onNext(channel);\n        }\n      },\n    });\n\n    return () => unsubscribe;\n  }\n\n  public onChannelUpdated(\n    onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)\n  ): ChatKittyUnsubscribe {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const unsubscribe = this.stompX.listenForEvent<Channel>({\n      topic: currentUser._topics.channels,\n      event: 'user.channel.updated',\n      onSuccess: (channel) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(channel);\n        } else {\n          onNextOrObserver.onNext(channel);\n        }\n      },\n    });\n\n    return () => unsubscribe;\n  }\n\n  public getChannelMembers(\n    request: GetChannelMembersRequest\n  ): Promise<GetUsersResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      ChatKittyPaginator.createInstance<User>({\n        stompX: this.stompX,\n        relay: request.channel._relays.members,\n        contentName: 'users',\n        parameters: {\n          ...request.filter,\n        },\n      })\n        .then((paginator) => resolve(new GetUsersSucceededResult(paginator)))\n        .catch((error) => resolve(new ChatKittyFailedResult(error)));\n    });\n  }\n\n  public getReadReceipts(\n    request: GetReadReceiptsRequest\n  ): Promise<GetReadReceiptsResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      ChatKittyPaginator.createInstance<ReadReceipt>({\n        stompX: this.stompX,\n        relay: request.message._relays.readReceipts,\n        contentName: 'receipts',\n      })\n        .then((paginator) =>\n          resolve(new GetReadReceiptsSucceededResult(paginator))\n        )\n        .catch((error) => resolve(new ChatKittyFailedResult(error)));\n    });\n  }\n\n  public getUsers(request?: GetUsersRequest): Promise<GetUsersResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      let parameters: Record<string, unknown> | undefined;\n\n      if (isGetUsersRequest(request)) {\n        parameters = {\n          ...request.filter,\n        };\n      }\n\n      ChatKittyPaginator.createInstance<User>({\n        stompX: this.stompX,\n        relay: currentUser._relays.contacts,\n        contentName: 'users',\n        parameters: parameters,\n      })\n        .then((paginator) => resolve(new GetUsersSucceededResult(paginator)))\n        .catch((error) => resolve(new ChatKittyFailedResult(error)));\n    });\n  }\n\n  public getUsersCount(request?: GetUsersRequest): Promise<GetCountResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      let parameters: Record<string, unknown> | undefined;\n\n      if (isGetUsersRequest(request)) {\n        parameters = {\n          ...request.filter,\n        };\n      }\n\n      this.stompX.relayResource<{ count: number }>({\n        destination: currentUser._relays.contactsCount,\n        parameters: parameters,\n        onSuccess: (resource) => {\n          resolve(new GetCountSucceedResult(resource.count));\n        },\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public onUserPresenceChanged(\n    onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)\n  ): ChatKittyUnsubscribe {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const unsubscribe = this.stompX.listenForEvent<User>({\n      topic: currentUser._topics.contacts,\n      event: 'contact.presence.changed',\n      onSuccess: (user) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(user);\n        } else {\n          onNextOrObserver.onNext(user);\n        }\n      },\n    });\n\n    return () => unsubscribe;\n  }\n\n  public inviteUser(request: InviteUserRequest): Promise<InviteUserResult> {\n    const destination = request.channel._actions.invite;\n\n    if (!destination) {\n      throw new ChannelNotInvitableError(request.channel);\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.sendAction<User>({\n        destination: destination,\n        body: {\n          user: request.user,\n        },\n        onSuccess: (resource) => {\n          resolve(new InvitedUserResult(resource));\n        },\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public onParticipantStartedTyping(\n    onNextOrObserver: ChatKittyObserver<User> | ((participant: User) => void)\n  ): ChatKittyUnsubscribe {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const unsubscribe = this.stompX.listenForEvent<User>({\n      topic: currentUser._topics.participants,\n      event: 'participant.typing.started',\n      onSuccess: (participant) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(participant);\n        } else {\n          onNextOrObserver.onNext(participant);\n        }\n      },\n    });\n\n    return () => unsubscribe;\n  }\n\n  public onParticipantStoppedTyping(\n    onNextOrObserver: ChatKittyObserver<User> | ((participant: User) => void)\n  ): ChatKittyUnsubscribe {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    const unsubscribe = this.stompX.listenForEvent<User>({\n      topic: currentUser._topics.participants,\n      event: 'participant.typing.stopped',\n      onSuccess: (participant) => {\n        if (typeof onNextOrObserver === 'function') {\n          onNextOrObserver(participant);\n        } else {\n          onNextOrObserver.onNext(participant);\n        }\n      },\n    });\n\n    return () => unsubscribe;\n  }\n\n  public getUser(param: number): Promise<GetUserResult> {\n    return new Promise((resolve) => {\n      this.stompX.relayResource<User>({\n        destination: ChatKitty.userRelay(param),\n        onSuccess: (user) => {\n          resolve(new GetUserSucceededResult(user));\n        },\n      });\n    });\n  }\n\n  public getUserIsChannelMember(\n    request: GetUserIsChannelMemberRequest\n  ): Promise<GetUserIsChannelMemberResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      this.stompX.relayResource<{ exists: boolean }>({\n        destination: request.user._relays.channelMember,\n        parameters: {\n          channelId: request.channel.id,\n        },\n        onSuccess: (resource) => {\n          resolve(new GetUserIsChannelMemberSucceededResult(resource.exists));\n        },\n        onError: (error) => {\n          resolve(new ChatKittyFailedResult(error));\n        },\n      });\n    });\n  }\n\n  public blockUser(request: BlockUserRequest): Promise<BlockUserResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<User>({\n        destination: `/application/v1/users/${request.user.id}.block`,\n        body: {},\n        onSuccess: (resource) => {\n          resolve(new BlockUserSucceededResult(resource));\n        },\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n\n  public getUserBlockList(): Promise<GetUserBlockListResult> {\n    const currentUser = this.currentUser;\n\n    if (!currentUser) {\n      throw new NoActiveSessionError();\n    }\n\n    return new Promise((resolve) => {\n      ChatKittyPaginator.createInstance<UserBlockListItem>({\n        stompX: this.stompX,\n        relay: currentUser._relays.userBlockListItems,\n        contentName: 'items',\n      })\n        .then((paginator) =>\n          resolve(new GetUserBlockListSucceededResult(paginator))\n        )\n        .catch((error) => resolve(new ChatKittyFailedResult(error)));\n    });\n  }\n\n  public deleteUserBlockListItem(\n    request: DeleteUserBlockListItemRequest\n  ): Promise<DeleteUserBlockListItemResult> {\n    return new Promise((resolve) => {\n      this.stompX.sendAction<User>({\n        destination: request.item._actions.delete,\n        body: {},\n        onSuccess: (resource) =>\n          resolve(new DeleteUserBlockListItemSucceededResult(resource)),\n        onError: (error) => resolve(new ChatKittyFailedResult(error)),\n      });\n    });\n  }\n}\n\nexport declare class ChatKittyConfiguration {\n  apiKey: string;\n  isSecure?: boolean;\n  host?: string;\n}\n\nclass MessageMapper {\n  readonly readFileGrant: string;\n\n  constructor(grant: string) {\n    this.readFileGrant = grant;\n  }\n\n  public map<M extends Message>(message: M): M {\n    if (isFileMessage(message)) {\n      return {\n        ...message,\n        file: {\n          ...message.file,\n          url: message.file.url + `?grant=${this.readFileGrant}`,\n        },\n      };\n    } else {\n      return {\n        ...message,\n      };\n    }\n  }\n}\n\nfunction isGetChannelsRequest(\n  param: GetChannelsRequest | undefined\n): param is GetChannelsRequest {\n  const request = param as GetChannelsRequest;\n\n  return request?.filter !== undefined;\n}\n\nfunction isGetUsersRequest(\n  param: GetUsersRequest | undefined\n): param is GetUsersRequest {\n  const request = param as GetUsersRequest;\n\n  return request?.filter !== undefined;\n}\n\nfunction isGetChannelsUnreadRequest(\n  param: GetUnreadChannelsRequest | undefined\n): param is GetUnreadChannelsRequest {\n  const request = param as GetUnreadChannelsRequest;\n\n  return request?.filter !== undefined;\n}\n\nfunction isGetUnreadMessagesCountRequest(\n  param: GetUnreadMessagesCountRequest | undefined\n): param is GetUnreadMessagesCountRequest {\n  const request = param as GetUnreadMessagesCountRequest;\n\n  return request?.channel !== undefined;\n}\n\nfunction isSendChannelTextMessageRequest(\n  request: SendMessageRequest\n): request is SendTextMessageRequest {\n  return (request as SendTextMessageRequest).body !== undefined;\n}\n\nfunction isSendChannelFileMessageRequest(\n  request: SendMessageRequest\n): request is SendFileMessageRequest {\n  return (request as SendFileMessageRequest).file !== undefined;\n}\n\nfunction isGetChannelMessagesRequest(\n  request: GetMessagesRequest\n): request is GetChannelMessagesRequest {\n  return (request as GetChannelMessagesRequest).channel !== undefined;\n}\n\nfunction isGetMessageRepliesRequest(\n  request: GetMessagesRequest\n): request is GetMessageRepliesRequest {\n  return (request as GetMessageRepliesRequest).message !== undefined;\n}\n\nfunction isCreateChatKittyExternalFileProperties(\n  result: CreateChatKittyFileProperties\n): result is CreateChatKittyExternalFileProperties {\n  return (result as CreateChatKittyExternalFileProperties).url !== undefined;\n}\n\ninterface Calls {\n  localStream: MediaStream | null;\n\n  currentCall: Call | null;\n\n  isMuted: boolean;\n\n  isCameraOn: boolean;\n\n  initialize(configuration: {\n    media: { audio: boolean; video: boolean };\n  }): Promise<void>;\n\n  startCall(request: StartCallRequest): Promise<StartCallResult>;\n\n  acceptCall(request: AcceptCallRequest): Promise<AcceptCallResult>;\n\n  declineCall(request: DeclineCallRequest): Promise<DeclineCallResult>;\n\n  leaveCall(): void;\n\n  switchCamera(): void;\n\n  toggleMute(): void;\n\n  toggleCamera(): void;\n\n  getCalls(request: GetCallsRequest): Promise<GetCallsResult>;\n\n  getCall(id: number): Promise<GetCallResult>;\n\n  getCurrentCallParticipants(): Promise<GetUsersResult>;\n\n  getUserMediaSettings(\n    request: GetUserMediaSettingsRequest\n  ): Promise<GetUserMediaSettingsResult>;\n\n  onCallInvite(\n    onNextOrObserver: ChatKittyObserver<Call> | ((call: Call) => void)\n  ): ChatKittyUnsubscribe;\n\n  onCallActive(\n    onNextOrObserver: ChatKittyObserver<Call> | ((call: Call) => void)\n  ): ChatKittyUnsubscribe;\n\n  onParticipantAcceptedCall(\n    onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)\n  ): ChatKittyUnsubscribe;\n\n  onParticipantDeclinedCall(\n    onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)\n  ): ChatKittyUnsubscribe;\n\n  onParticipantActive(\n    onNextOrObserver:\n      | ChatKittyObserver<{ user: User; stream: MediaStream }>\n      | ((user: User, stream: MediaStream) => void)\n  ): ChatKittyUnsubscribe;\n\n  onParticipantMediaSettingsUpdated(\n    onNextOrObserver:\n      | ChatKittyObserver<UserMediaSettings>\n      | ((settings: UserMediaSettings) => void)\n  ): ChatKittyUnsubscribe;\n\n  onParticipantLeftCall(\n    onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)\n  ): ChatKittyUnsubscribe;\n\n  onCallEnded(\n    onNextOrObserver: ChatKittyObserver<Call> | ((call: Call) => void)\n  ): ChatKittyUnsubscribe;\n\n  close(): void;\n}\n\ninterface Connection {\n  createOffer(): Promise<void>;\n\n  answerOffer(description: RTCSessionDescriptionType): Promise<void>;\n\n  addCandidate(candidate: RTCIceCandidateType): Promise<void>;\n\n  close(): void;\n}\n\nclass P2PConnection implements Connection {\n  private static readonly rtcConfiguration: RTCPeerConnectionConfiguration = {\n    iceServers: [\n      {\n        username: 'participant',\n        credential: 'chatkittyturn0',\n        urls: ['turn:3.215.180.233:3478'],\n      },\n    ],\n  };\n\n  private readonly offerAnswerOptions: RTCOfferOptions;\n\n  private rtcPeerConnection: RTCPeerConnection;\n\n  constructor(\n    private readonly peer: User,\n    private readonly stream: MediaStream,\n    private readonly signalDispatcher: CallSignalDispatcher,\n    private readonly onParticipantActive?: (\n      user: User,\n      stream: MediaStream\n    ) => void\n  ) {\n    this.offerAnswerOptions = {\n      offerToReceiveAudio: true,\n      offerToReceiveVideo: true,\n    };\n\n    this.rtcPeerConnection = new RTCPeerConnection(\n      P2PConnection.rtcConfiguration\n    );\n\n    this.rtcPeerConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        signalDispatcher.dispatch({\n          type: 'ADD_CANDIDATE',\n          peer: { id: peer.id },\n          payload: event.candidate,\n        });\n      }\n    };\n\n    this.rtcPeerConnection.onaddstream = (event) => {\n      this.onParticipantActive?.(peer, event.stream);\n    };\n\n    this.rtcPeerConnection.onconnectionstatechange = () => {\n      switch (this.rtcPeerConnection.connectionState) {\n        case 'connected':\n          break;\n        case 'disconnected':\n        case 'failed':\n        case 'closed':\n          // TODO end call session\n          break;\n      }\n    };\n\n    this.rtcPeerConnection.oniceconnectionstatechange = () => {\n      switch (this.rtcPeerConnection.connectionState) {\n        case 'disconnected':\n        case 'failed':\n        case 'closed':\n          // TODO end call session\n          break;\n      }\n    };\n\n    this.rtcPeerConnection.addStream(this.stream);\n  }\n\n  createOffer = async () => {\n    const description = await this.rtcPeerConnection.createOffer(\n      this.offerAnswerOptions\n    );\n\n    await this.rtcPeerConnection.setLocalDescription(description);\n\n    this.signalDispatcher.dispatch({\n      type: 'SEND_DESCRIPTION',\n      peer: this.peer,\n      payload: description,\n    });\n  };\n\n  answerOffer = async (description: RTCSessionDescriptionType) => {\n    await this.rtcPeerConnection.setRemoteDescription(description);\n\n    if (description.type === 'offer') {\n      const answer = await this.rtcPeerConnection.createAnswer(\n        this.offerAnswerOptions\n      );\n\n      await this.rtcPeerConnection.setLocalDescription(answer);\n\n      this.signalDispatcher.dispatch({\n        type: 'SEND_DESCRIPTION',\n        peer: this.peer,\n        payload: answer,\n      });\n    }\n  };\n\n  addCandidate = async (candidate: RTCIceCandidateType): Promise<void> => {\n    await this.rtcPeerConnection.addIceCandidate(candidate);\n  };\n\n  close = (): void => {\n    this.rtcPeerConnection.close();\n  };\n}\n\nclass CallSignalDispatcher {\n  constructor(private stompX: StompX, private call: Call) {}\n\n  dispatch = (request: CreateCallSignalRequest): void => {\n    this.stompX.sendAction<never>({\n      destination: this.call._actions.signal,\n      body: request,\n    });\n  };\n}\n\nexport default ChatKitty;\n"]}